
GPIO_PERIPHERAL_BUS_EXAMPLE1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000154  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  6 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c0  00000000  00000000  000028d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000003ad  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001455  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000512  00000000  00000000  00004292  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001905  00000000  00000000  000047a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002a8  00000000  00000000  000060ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000008f8  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000004a4  00000000  00000000  00006c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 002ca931  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 18 .debug_ranges 00000178  00000000  00000000  002d1a28  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf df 54 	sub	pc,pc,-8364

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ff 58 	sub	pc,pc,-168

Disassembly of section .text:

80002008 <gpio_get_pin_value>:
80002008:	f8 08 16 05 	lsr	r8,r12,0x5
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000200c:	a9 68       	lsl	r8,0x8
8000200e:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002012:	71 88       	ld.w	r8,r8[0x60]
80002014:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12

8000201e <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000201e:	f8 08 16 05 	lsr	r8,r12,0x5
80002022:	a9 68       	lsl	r8,0x8
80002024:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002028:	30 19       	mov	r9,1
8000202a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000202e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002032:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002036:	91 1c       	st.w	r8[0x4],r12
}
80002038:	5e fc       	retal	r12

8000203a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000203a:	f8 08 16 05 	lsr	r8,r12,0x5
8000203e:	a9 68       	lsl	r8,0x8
80002040:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002044:	30 19       	mov	r9,1
80002046:	f2 0c 09 4c 	lsl	r12,r9,r12
8000204a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000204e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002052:	91 1c       	st.w	r8[0x4],r12
}
80002054:	5e fc       	retal	r12

80002056 <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002056:	f8 08 16 05 	lsr	r8,r12,0x5
8000205a:	a9 68       	lsl	r8,0x8
8000205c:	e0 28 f0 00 	sub	r8,61440
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002060:	30 19       	mov	r9,1
80002062:	f2 0c 09 4c 	lsl	r12,r9,r12
80002066:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000206a:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000206e:	91 1c       	st.w	r8[0x4],r12
}
80002070:	5e fc       	retal	r12
80002072:	d7 03       	nop

80002074 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002074:	fe 78 08 00 	mov	r8,-63488
80002078:	e0 69 00 83 	mov	r9,131
8000207c:	f2 0c 01 0c 	sub	r12,r9,r12
80002080:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002084:	f2 ca ff c0 	sub	r10,r9,-64
80002088:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000208c:	58 08       	cp.w	r8,0
8000208e:	c0 21       	brne	80002092 <_get_interrupt_handler+0x1e>
80002090:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002092:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002096:	48 5a       	lddpc	r10,800020a8 <_get_interrupt_handler+0x34>
80002098:	f4 09 00 39 	add	r9,r10,r9<<0x3
8000209c:	f0 08 11 1f 	rsub	r8,r8,31
800020a0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800020a2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800020a6:	5e fc       	retal	r12
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	24 00       	sub	r0,64

800020ac <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800020ac:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800020b0:	fe c0 fe b0 	sub	r0,pc,-336

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800020b4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800020b8:	d5 53       	csrf	0x15
  cp      r0, r1
800020ba:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800020bc:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800020be:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800020c0:	c0 72       	brcc	800020ce <idata_load_loop_end>
  st.d    r0++, r4
800020c2:	fe c2 fc 22 	sub	r2,pc,-990

800020c6 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800020c6:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800020c8:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800020ca:	02 30       	cp.w	r0,r1
  cp      r0, r1
800020cc:	cf d3       	brcs	800020c6 <idata_load_loop>

800020ce <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800020ce:	30 80       	mov	r0,8
  mov     r2, 0
800020d0:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800020d4:	02 30       	cp.w	r0,r1
  cp      r0, r1
800020d6:	c0 62       	brcc	800020e2 <udata_clear_loop_end>
  brlo    udata_clear_loop
800020d8:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800020da:	30 03       	mov	r3,0

800020dc <udata_clear_loop>:
800020dc:	a1 22       	st.d	r0++,r2
800020de:	02 30       	cp.w	r0,r1
800020e0:	cf e3       	brcs	800020dc <udata_clear_loop>

800020e2 <udata_clear_loop_end>:
800020e2:	fe cf ff fa 	sub	pc,pc,-6
800020e6:	d7 03       	nop

800020e8 <main>:
#include "conf_gpio_peripheral_bus_example.h"

/** \brief Main function to alter the state of the pin \c GPIO_PIN_EXAMPLE.
 */
int main(void)
{
800020e8:	d4 31       	pushm	r0-r7,lr
800020ea:	30 04       	mov	r4,0
			gpio_clr_gpio_pin(GPIO_PIN_EXAMPLE_1);
			state++;
			break;

		case 1:
			gpio_set_gpio_pin(GPIO_PIN_EXAMPLE_1);
800020ec:	33 b2       	mov	r2,59
800020ee:	30 21       	mov	r1,2
		switch (state) {
		case 0:

			/* Access with GPIO driver gpio.c with clear and set
			 * access. */
			gpio_clr_gpio_pin(GPIO_PIN_EXAMPLE_1);
800020f0:	30 10       	mov	r0,1
			state++;
			break;

		case 3:
		default:
			gpio_tgl_gpio_pin(GPIO_PIN_EXAMPLE_1);
800020f2:	08 93       	mov	r3,r4
			break;
		}

		/* Poll push button value. */
		for (i = 0; i < 1000; i += 4) {
			if (gpio_get_pin_value(GPIO_PIN_EXAMPLE_3) == true) {
800020f4:	33 a6       	mov	r6,58
				gpio_clr_gpio_pin(GPIO_PIN_EXAMPLE_2);
			} else {
				gpio_set_gpio_pin(GPIO_PIN_EXAMPLE_2);
800020f6:	33 c5       	mov	r5,60
{
	uint32_t state = 0;
	uint32_t i;

	while (1) {
		switch (state) {
800020f8:	58 14       	cp.w	r4,1
800020fa:	c0 a0       	breq	8000210e <main+0x26>
800020fc:	c0 43       	brcs	80002104 <main+0x1c>
800020fe:	58 24       	cp.w	r4,2
80002100:	c1 11       	brne	80002122 <main+0x3a>
80002102:	c0 b8       	rjmp	80002118 <main+0x30>
		case 0:

			/* Access with GPIO driver gpio.c with clear and set
			 * access. */
			gpio_clr_gpio_pin(GPIO_PIN_EXAMPLE_1);
80002104:	04 9c       	mov	r12,r2
80002106:	f0 1f 00 12 	mcall	8000214c <main+0x64>
8000210a:	00 94       	mov	r4,r0
			state++;
			break;
8000210c:	c0 f8       	rjmp	8000212a <main+0x42>

		case 1:
			gpio_set_gpio_pin(GPIO_PIN_EXAMPLE_1);
8000210e:	04 9c       	mov	r12,r2
80002110:	f0 1f 00 10 	mcall	80002150 <main+0x68>
80002114:	02 94       	mov	r4,r1
			state++;
			break;
80002116:	c0 a8       	rjmp	8000212a <main+0x42>

		case 2:

			/* Note that it is also possible to use the GPIO toggle
			 * feature. */
			gpio_tgl_gpio_pin(GPIO_PIN_EXAMPLE_1);
80002118:	04 9c       	mov	r12,r2
8000211a:	f0 1f 00 0f 	mcall	80002154 <main+0x6c>
8000211e:	30 34       	mov	r4,3
			state++;
			break;
80002120:	c0 58       	rjmp	8000212a <main+0x42>

		case 3:
		default:
			gpio_tgl_gpio_pin(GPIO_PIN_EXAMPLE_1);
80002122:	04 9c       	mov	r12,r2
80002124:	f0 1f 00 0c 	mcall	80002154 <main+0x6c>
80002128:	06 94       	mov	r4,r3
8000212a:	06 97       	mov	r7,r3
			break;
		}

		/* Poll push button value. */
		for (i = 0; i < 1000; i += 4) {
			if (gpio_get_pin_value(GPIO_PIN_EXAMPLE_3) == true) {
8000212c:	0c 9c       	mov	r12,r6
8000212e:	f0 1f 00 0b 	mcall	80002158 <main+0x70>
80002132:	c0 50       	breq	8000213c <main+0x54>
				gpio_clr_gpio_pin(GPIO_PIN_EXAMPLE_2);
80002134:	0a 9c       	mov	r12,r5
80002136:	f0 1f 00 06 	mcall	8000214c <main+0x64>
8000213a:	c0 48       	rjmp	80002142 <main+0x5a>
			} else {
				gpio_set_gpio_pin(GPIO_PIN_EXAMPLE_2);
8000213c:	0a 9c       	mov	r12,r5
8000213e:	f0 1f 00 05 	mcall	80002150 <main+0x68>
			state = 0;
			break;
		}

		/* Poll push button value. */
		for (i = 0; i < 1000; i += 4) {
80002142:	2f c7       	sub	r7,-4
80002144:	e0 47 03 e8 	cp.w	r7,1000
80002148:	cf 21       	brne	8000212c <main+0x44>
8000214a:	cd 7b       	rjmp	800020f8 <main+0x10>
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	20 3a       	sub	r10,3
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	20 1e       	sub	lr,1
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	20 56       	sub	r6,5
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	20 08       	sub	r8,0

Disassembly of section .exception:

80002200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002200:	c0 08       	rjmp	80002200 <_evba>
	...

80002204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002204:	c0 08       	rjmp	80002204 <_handle_TLB_Multiple_Hit>
	...

80002208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002208:	c0 08       	rjmp	80002208 <_handle_Bus_Error_Data_Fetch>
	...

8000220c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000220c:	c0 08       	rjmp	8000220c <_handle_Bus_Error_Instruction_Fetch>
	...

80002210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002210:	c0 08       	rjmp	80002210 <_handle_NMI>
	...

80002214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002214:	c0 08       	rjmp	80002214 <_handle_Instruction_Address>
	...

80002218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002218:	c0 08       	rjmp	80002218 <_handle_ITLB_Protection>
	...

8000221c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000221c:	c0 08       	rjmp	8000221c <_handle_Breakpoint>
	...

80002220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002220:	c0 08       	rjmp	80002220 <_handle_Illegal_Opcode>
	...

80002224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002224:	c0 08       	rjmp	80002224 <_handle_Unimplemented_Instruction>
	...

80002228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002228:	c0 08       	rjmp	80002228 <_handle_Privilege_Violation>
	...

8000222c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000222c:	c0 08       	rjmp	8000222c <_handle_Floating_Point>
	...

80002230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002230:	c0 08       	rjmp	80002230 <_handle_Coprocessor_Absent>
	...

80002234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002234:	c0 08       	rjmp	80002234 <_handle_Data_Address_Read>
	...

80002238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002238:	c0 08       	rjmp	80002238 <_handle_Data_Address_Write>
	...

8000223c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000223c:	c0 08       	rjmp	8000223c <_handle_DTLB_Protection_Read>
	...

80002240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002240:	c0 08       	rjmp	80002240 <_handle_DTLB_Protection_Write>
	...

80002244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002244:	c0 08       	rjmp	80002244 <_handle_DTLB_Modified>
	...

80002250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002250:	c0 08       	rjmp	80002250 <_handle_ITLB_Miss>
	...

80002260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002260:	c0 08       	rjmp	80002260 <_handle_DTLB_Miss_Read>
	...

80002270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002270:	c0 08       	rjmp	80002270 <_handle_DTLB_Miss_Write>
	...

80002300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002300:	c0 08       	rjmp	80002300 <_handle_Supervisor_Call>
80002302:	d7 03       	nop

80002304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002304:	30 0c       	mov	r12,0
80002306:	cb 7e       	rcall	80002074 <_get_interrupt_handler>
80002308:	58 0c       	cp.w	r12,0
8000230a:	f8 0f 17 10 	movne	pc,r12
8000230e:	d6 03       	rete

80002310 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002310:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002312:	cb 1e       	rcall	80002074 <_get_interrupt_handler>
80002314:	58 0c       	cp.w	r12,0
80002316:	f8 0f 17 10 	movne	pc,r12
8000231a:	d6 03       	rete

8000231c <_int2>:
8000231c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000231e:	ca be       	rcall	80002074 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002320:	58 0c       	cp.w	r12,0
80002322:	f8 0f 17 10 	movne	pc,r12
80002326:	d6 03       	rete

80002328 <_int3>:
80002328:	30 3c       	mov	r12,3
8000232a:	ca 5e       	rcall	80002074 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000232c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000232e:	f8 0f 17 10 	movne	pc,r12
80002332:	d6 03       	rete
80002334:	d7 03       	nop
80002336:	d7 03       	nop
80002338:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000233a:	d7 03       	nop
8000233c:	d7 03       	nop
8000233e:	d7 03       	nop
80002340:	d7 03       	nop
80002342:	d7 03       	nop
80002344:	d7 03       	nop
80002346:	d7 03       	nop
80002348:	d7 03       	nop
8000234a:	d7 03       	nop
8000234c:	d7 03       	nop
8000234e:	d7 03       	nop
80002350:	d7 03       	nop
80002352:	d7 03       	nop
80002354:	d7 03       	nop
80002356:	d7 03       	nop
80002358:	d7 03       	nop
8000235a:	d7 03       	nop
8000235c:	d7 03       	nop
8000235e:	d7 03       	nop
80002360:	d7 03       	nop
80002362:	d7 03       	nop
80002364:	d7 03       	nop
80002366:	d7 03       	nop
80002368:	d7 03       	nop
8000236a:	d7 03       	nop
8000236c:	d7 03       	nop
8000236e:	d7 03       	nop
80002370:	d7 03       	nop
80002372:	d7 03       	nop
80002374:	d7 03       	nop
80002376:	d7 03       	nop
80002378:	d7 03       	nop
8000237a:	d7 03       	nop
8000237c:	d7 03       	nop
8000237e:	d7 03       	nop
80002380:	d7 03       	nop
80002382:	d7 03       	nop
80002384:	d7 03       	nop
80002386:	d7 03       	nop
80002388:	d7 03       	nop
8000238a:	d7 03       	nop
8000238c:	d7 03       	nop
8000238e:	d7 03       	nop
80002390:	d7 03       	nop
80002392:	d7 03       	nop
80002394:	d7 03       	nop
80002396:	d7 03       	nop
80002398:	d7 03       	nop
8000239a:	d7 03       	nop
8000239c:	d7 03       	nop
8000239e:	d7 03       	nop
800023a0:	d7 03       	nop
800023a2:	d7 03       	nop
800023a4:	d7 03       	nop
800023a6:	d7 03       	nop
800023a8:	d7 03       	nop
800023aa:	d7 03       	nop
800023ac:	d7 03       	nop
800023ae:	d7 03       	nop
800023b0:	d7 03       	nop
800023b2:	d7 03       	nop
800023b4:	d7 03       	nop
800023b6:	d7 03       	nop
800023b8:	d7 03       	nop
800023ba:	d7 03       	nop
800023bc:	d7 03       	nop
800023be:	d7 03       	nop
800023c0:	d7 03       	nop
800023c2:	d7 03       	nop
800023c4:	d7 03       	nop
800023c6:	d7 03       	nop
800023c8:	d7 03       	nop
800023ca:	d7 03       	nop
800023cc:	d7 03       	nop
800023ce:	d7 03       	nop
800023d0:	d7 03       	nop
800023d2:	d7 03       	nop
800023d4:	d7 03       	nop
800023d6:	d7 03       	nop
800023d8:	d7 03       	nop
800023da:	d7 03       	nop
800023dc:	d7 03       	nop
800023de:	d7 03       	nop
800023e0:	d7 03       	nop
800023e2:	d7 03       	nop
800023e4:	d7 03       	nop
800023e6:	d7 03       	nop
800023e8:	d7 03       	nop
800023ea:	d7 03       	nop
800023ec:	d7 03       	nop
800023ee:	d7 03       	nop
800023f0:	d7 03       	nop
800023f2:	d7 03       	nop
800023f4:	d7 03       	nop
800023f6:	d7 03       	nop
800023f8:	d7 03       	nop
800023fa:	d7 03       	nop
800023fc:	d7 03       	nop
800023fe:	d7 03       	nop
