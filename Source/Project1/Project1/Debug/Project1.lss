
Project1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000a2c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002c00  80002c00  00003000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000104  80002e00  80002e00  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002f04  80002f04  00003304  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000504  00000008  80002f08  00003408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  0000050c  8000340c  0000390c  2**0
                  ALLOC
  9 .bss          00000128  00000510  00000510  00000000  2**2
                  ALLOC
 10 .heap         0000e9c8  00000638  00000638  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000390c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000004d8  00000000  00000000  00003940  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000941  00000000  00000000  00003e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   00007d9c  00000000  00000000  00004759  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001927  00000000  00000000  0000c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004b53  00000000  00000000  0000de1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000924  00000000  00000000  00012970  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001877  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000163c  00000000  00000000  00014b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 004ab72d  00000000  00000000  00016147  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000468  00000000  00000000  004c1878  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf dd 70 	sub	pc,pc,-8848

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fd 74 	sub	pc,pc,-652

Disassembly of section .text:

80002008 <apply_led_mask>:
80002008:	d4 01       	pushm	lr
8000200a:	18 6a       	and	r10,r12
	apply_led_mask(number, LED2_GPIO, LED2_MASK_B);
}

void apply_led_mask(uint8_t number, uint8_t pin, uint8_t mask)
{
	if (number & mask)
8000200c:	30 08       	mov	r8,0
8000200e:	f0 0a 18 00 	cp.b	r10,r8
80002012:	c0 50       	breq	8000201c <apply_led_mask+0x14>
		gpio_set_pin_low(pin); // Turn LED ON
80002014:	16 9c       	mov	r12,r11
80002016:	f0 1f 00 04 	mcall	80002024 <apply_led_mask+0x1c>
8000201a:	d8 02       	popm	pc
	else
		gpio_set_pin_high(pin); // Turn LED OFF
8000201c:	16 9c       	mov	r12,r11
8000201e:	f0 1f 00 03 	mcall	80002028 <apply_led_mask+0x20>
80002022:	d8 02       	popm	pc
80002024:	80 00       	ld.sh	r0,r0[0x0]
80002026:	22 24       	sub	r4,34
80002028:	80 00       	ld.sh	r0,r0[0x0]
8000202a:	22 0e       	sub	lr,32

8000202c <set_ledx_num_b>:
	apply_led_mask(number, LED2_GPIO, LED2_MASK);
	apply_led_mask(number, LED3_GPIO, LED3_MASK);
}

void set_ledx_num_b(uint8_t number)
{
8000202c:	eb cd 40 80 	pushm	r7,lr
80002030:	18 97       	mov	r7,r12
	apply_led_mask(number, LED0_GPIO, LED0_MASK_B);
80002032:	30 4a       	mov	r10,4
80002034:	33 bb       	mov	r11,59
80002036:	f0 1f 00 08 	mcall	80002054 <set_ledx_num_b+0x28>
	apply_led_mask(number, LED1_GPIO, LED1_MASK_B);
8000203a:	30 2a       	mov	r10,2
8000203c:	33 cb       	mov	r11,60
8000203e:	0e 9c       	mov	r12,r7
80002040:	f0 1f 00 05 	mcall	80002054 <set_ledx_num_b+0x28>
	apply_led_mask(number, LED2_GPIO, LED2_MASK_B);
80002044:	30 1a       	mov	r10,1
80002046:	30 5b       	mov	r11,5
80002048:	0e 9c       	mov	r12,r7
8000204a:	f0 1f 00 03 	mcall	80002054 <set_ledx_num_b+0x28>
}
8000204e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002052:	00 00       	add	r0,r0
80002054:	80 00       	ld.sh	r0,r0[0x0]
80002056:	20 08       	sub	r8,0

80002058 <config_led_gpio>:

/* INCLUDES */
#include "conf_gpio.h"

void config_led_gpio(void)
{
80002058:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000205a:	30 3b       	mov	r11,3
8000205c:	33 bc       	mov	r12,59
8000205e:	f0 1f 00 08 	mcall	8000207c <config_led_gpio+0x24>
	gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002062:	30 3b       	mov	r11,3
80002064:	33 cc       	mov	r12,60
80002066:	f0 1f 00 06 	mcall	8000207c <config_led_gpio+0x24>
	gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000206a:	30 3b       	mov	r11,3
8000206c:	30 5c       	mov	r12,5
8000206e:	f0 1f 00 04 	mcall	8000207c <config_led_gpio+0x24>
	gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002072:	30 3b       	mov	r11,3
80002074:	30 6c       	mov	r12,6
80002076:	f0 1f 00 02 	mcall	8000207c <config_led_gpio+0x24>
}
8000207a:	d8 02       	popm	pc
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	21 40       	sub	r0,20

80002080 <qt_get_activation>:
}

bool qt_get_activation(bool current, bool past, bool edge)
{
	bool activation = false;
	switch(edge)
80002080:	58 1a       	cp.w	r10,1
80002082:	c0 80       	breq	80002092 <qt_get_activation+0x12>
	{
		default:
		case QT_PRESSED:
			if ((current == true) && (past == false))
80002084:	58 0c       	cp.w	r12,0
80002086:	c0 90       	breq	80002098 <qt_get_activation+0x18>
	}
	//}
	button->past_state = button->current_state;
}

bool qt_get_activation(bool current, bool past, bool edge)
80002088:	ec 1b 00 01 	eorl	r11,0x1
8000208c:	f9 db c0 08 	bfextu	r12,r11,0x0,0x8
80002090:	5e fc       	retal	r12
			if ((current == true) && (past == false))
			activation = true;
			break;
		
		case QT_RELEASED:
			if ((current == false) && (past == true))
80002092:	58 0c       	cp.w	r12,0
80002094:	c0 21       	brne	80002098 <qt_get_activation+0x18>
80002096:	5e fb       	retal	r11
80002098:	5e fd       	retal	0
8000209a:	d7 03       	nop

8000209c <poll_qt_button>:
	
	return qt;
}

void poll_qt_button(button_t* button, bool edge)
{
8000209c:	eb cd 40 e0 	pushm	r5-r7,lr
800020a0:	18 97       	mov	r7,r12
800020a2:	16 95       	mov	r5,r11
	button->current_state = gpio_get_pin_value(button->pin);
800020a4:	19 8c       	ld.ub	r12,r12[0x0]
800020a6:	f0 1f 00 0b 	mcall	800020d0 <poll_qt_button+0x34>
800020aa:	18 96       	mov	r6,r12
800020ac:	ae ac       	st.b	r7[0x2],r12
	//if (button->current_state == 1)
	//{
		////delay
	if (button->current_state == gpio_get_pin_value(button->pin))
800020ae:	0f 8c       	ld.ub	r12,r7[0x0]
800020b0:	f0 1f 00 08 	mcall	800020d0 <poll_qt_button+0x34>
800020b4:	f8 06 18 00 	cp.b	r6,r12
800020b8:	c0 71       	brne	800020c6 <poll_qt_button+0x2a>
	{
		button->active = qt_get_activation(button->current_state,\
800020ba:	0a 9a       	mov	r10,r5
800020bc:	0f 9b       	ld.ub	r11,r7[0x1]
800020be:	0f ac       	ld.ub	r12,r7[0x2]
800020c0:	f0 1f 00 05 	mcall	800020d4 <poll_qt_button+0x38>
800020c4:	ae bc       	st.b	r7[0x3],r12
							button->past_state, edge);
	}
	//}
	button->past_state = button->current_state;
800020c6:	0f a8       	ld.ub	r8,r7[0x2]
800020c8:	ae 98       	st.b	r7[0x1],r8
}
800020ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020ce:	00 00       	add	r0,r0
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	21 f8       	sub	r8,31
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	20 80       	sub	r0,8

800020d8 <config_qt_gpio>:
#include "conf_qt.h"

/* QT_TOUCH_SENSOR UTILS */

qt_sensor_t* config_qt_gpio(void)
{
800020d8:	eb cd 40 80 	pushm	r7,lr
	gpio_configure_pin(QT1081_TOUCH_SENSOR_ENTER, GPIO_DIR_INPUT);
800020dc:	30 0b       	mov	r11,0
800020de:	33 ac       	mov	r12,58
800020e0:	f0 1f 00 15 	mcall	80002134 <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_LEFT,  GPIO_DIR_INPUT);
800020e4:	30 0b       	mov	r11,0
800020e6:	33 9c       	mov	r12,57
800020e8:	f0 1f 00 13 	mcall	80002134 <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_RIGHT, GPIO_DIR_INPUT);
800020ec:	30 0b       	mov	r11,0
800020ee:	33 8c       	mov	r12,56
800020f0:	f0 1f 00 11 	mcall	80002134 <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_UP,	  GPIO_DIR_INPUT);
800020f4:	30 0b       	mov	r11,0
800020f6:	33 6c       	mov	r12,54
800020f8:	f0 1f 00 0f 	mcall	80002134 <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_DOWN,  GPIO_DIR_INPUT);
800020fc:	30 0b       	mov	r11,0
800020fe:	33 7c       	mov	r12,55
80002100:	f0 1f 00 0d 	mcall	80002134 <config_qt_gpio+0x5c>
	*	OVR - Output value reg. Flag: GPIO_INIT_HIGH or GPIO_INIT_LOW, sets/clears pin in ovr.
	*	GPER - Enable GPIO. set/clear gper.
	*	
	*	Flags can be found in gpio.h
	*/
	qt_sensor_t *qt = malloc(sizeof(*qt)); // Or sizeof(qt_sensor)
80002104:	31 4c       	mov	r12,20
80002106:	f0 1f 00 0d 	mcall	80002138 <config_qt_gpio+0x60>
8000210a:	18 97       	mov	r7,r12
	*qt = (qt_sensor_t){ 
8000210c:	31 4a       	mov	r10,20
8000210e:	30 0b       	mov	r11,0
80002110:	f0 1f 00 0b 	mcall	8000213c <config_qt_gpio+0x64>
80002114:	33 a8       	mov	r8,58
80002116:	ae 88       	st.b	r7[0x0],r8
80002118:	33 98       	mov	r8,57
8000211a:	ae c8       	st.b	r7[0x4],r8
8000211c:	33 88       	mov	r8,56
8000211e:	ef 68 00 08 	st.b	r7[8],r8
80002122:	33 68       	mov	r8,54
80002124:	ef 68 00 0c 	st.b	r7[12],r8
80002128:	33 78       	mov	r8,55
8000212a:	ef 68 00 10 	st.b	r7[16],r8
						._up = INIT_QT_UP, ._down = INIT_QT_DOWN }
		}
	};
	
	return qt;
}
8000212e:	0e 9c       	mov	r12,r7
80002130:	e3 cd 80 80 	ldm	sp++,r7,pc
80002134:	80 00       	ld.sh	r0,r0[0x0]
80002136:	21 40       	sub	r0,20
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	23 88       	sub	r8,56
8000213c:	80 00       	ld.sh	r0,r0[0x0]
8000213e:	27 b4       	sub	r4,123

80002140 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002140:	f8 08 16 05 	lsr	r8,r12,0x5
80002144:	a9 68       	lsl	r8,0x8
80002146:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000214a:	16 99       	mov	r9,r11
8000214c:	e2 19 00 04 	andl	r9,0x4,COH
80002150:	c0 70       	breq	8000215e <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002152:	30 19       	mov	r9,1
80002154:	f2 0c 09 49 	lsl	r9,r9,r12
80002158:	f1 49 00 74 	st.w	r8[116],r9
8000215c:	c0 68       	rjmp	80002168 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
8000215e:	30 19       	mov	r9,1
80002160:	f2 0c 09 49 	lsl	r9,r9,r12
80002164:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002168:	16 99       	mov	r9,r11
8000216a:	e2 19 00 80 	andl	r9,0x80,COH
8000216e:	c2 40       	breq	800021b6 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002170:	16 99       	mov	r9,r11
80002172:	e2 19 01 80 	andl	r9,0x180,COH
80002176:	c0 90       	breq	80002188 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002178:	30 19       	mov	r9,1
8000217a:	f2 0c 09 49 	lsl	r9,r9,r12
8000217e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002182:	f1 49 00 b8 	st.w	r8[184],r9
80002186:	c1 88       	rjmp	800021b6 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002188:	16 99       	mov	r9,r11
8000218a:	e2 19 02 80 	andl	r9,0x280,COH
8000218e:	c0 90       	breq	800021a0 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002190:	30 19       	mov	r9,1
80002192:	f2 0c 09 49 	lsl	r9,r9,r12
80002196:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000219a:	f1 49 00 b8 	st.w	r8[184],r9
8000219e:	c0 c8       	rjmp	800021b6 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
800021a0:	16 99       	mov	r9,r11
800021a2:	e2 19 03 80 	andl	r9,0x380,COH
800021a6:	c0 80       	breq	800021b6 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800021a8:	30 19       	mov	r9,1
800021aa:	f2 0c 09 49 	lsl	r9,r9,r12
800021ae:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800021b2:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800021b6:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021ba:	c1 50       	breq	800021e4 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800021bc:	e2 1b 00 02 	andl	r11,0x2,COH
800021c0:	c0 70       	breq	800021ce <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800021c2:	30 19       	mov	r9,1
800021c4:	f2 0c 09 49 	lsl	r9,r9,r12
800021c8:	f1 49 00 54 	st.w	r8[84],r9
800021cc:	c0 68       	rjmp	800021d8 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800021ce:	30 19       	mov	r9,1
800021d0:	f2 0c 09 49 	lsl	r9,r9,r12
800021d4:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800021d8:	30 19       	mov	r9,1
800021da:	f2 0c 09 49 	lsl	r9,r9,r12
800021de:	f1 49 00 44 	st.w	r8[68],r9
800021e2:	c0 68       	rjmp	800021ee <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800021e4:	30 19       	mov	r9,1
800021e6:	f2 0c 09 49 	lsl	r9,r9,r12
800021ea:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800021ee:	30 19       	mov	r9,1
800021f0:	f2 0c 09 4c 	lsl	r12,r9,r12
800021f4:	91 1c       	st.w	r8[0x4],r12
}
800021f6:	5e fc       	retal	r12

800021f8 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021f8:	f8 08 16 05 	lsr	r8,r12,0x5
800021fc:	a9 68       	lsl	r8,0x8
800021fe:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002202:	71 88       	ld.w	r8,r8[0x60]
80002204:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002208:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000220c:	5e fc       	retal	r12

8000220e <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000220e:	f8 08 16 05 	lsr	r8,r12,0x5
80002212:	a9 68       	lsl	r8,0x8
80002214:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002218:	30 19       	mov	r9,1
8000221a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000221e:	f1 4c 00 54 	st.w	r8[84],r12
}
80002222:	5e fc       	retal	r12

80002224 <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002224:	f8 08 16 05 	lsr	r8,r12,0x5
80002228:	a9 68       	lsl	r8,0x8
8000222a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000222e:	30 19       	mov	r9,1
80002230:	f2 0c 09 4c 	lsl	r12,r9,r12
80002234:	f1 4c 00 58 	st.w	r8[88],r12
}
80002238:	5e fc       	retal	r12

8000223a <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000223a:	f8 08 16 05 	lsr	r8,r12,0x5
8000223e:	a9 68       	lsl	r8,0x8
80002240:	e0 28 f0 00 	sub	r8,61440
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002244:	30 19       	mov	r9,1
80002246:	f2 0c 09 4c 	lsl	r12,r9,r12
8000224a:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000224e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002252:	91 1c       	st.w	r8[0x4],r12
}
80002254:	5e fc       	retal	r12
80002256:	d7 03       	nop

80002258 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002258:	fe 78 08 00 	mov	r8,-63488
8000225c:	e0 69 00 83 	mov	r9,131
80002260:	f2 0c 01 0c 	sub	r12,r9,r12
80002264:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002268:	f2 ca ff c0 	sub	r10,r9,-64
8000226c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002270:	58 08       	cp.w	r8,0
80002272:	c0 21       	brne	80002276 <_get_interrupt_handler+0x1e>
80002274:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002276:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000227a:	48 5a       	lddpc	r10,8000228c <_get_interrupt_handler+0x34>
8000227c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002280:	f0 08 11 1f 	rsub	r8,r8,31
80002284:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002286:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000228a:	5e fc       	retal	r12
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	2e 00       	sub	r0,-32

80002290 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002290:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002294:	fe c0 f6 94 	sub	r0,pc,-2412

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002298:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000229c:	d5 53       	csrf	0x15
  cp      r0, r1
8000229e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800022a0:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800022a4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800022a6:	c0 72       	brcc	800022b4 <idata_load_loop_end>
  cp      r0, r1
800022a8:	fe c2 f3 a0 	sub	r2,pc,-3168

800022ac <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800022ac:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800022ae:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800022b0:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800022b2:	cf d3       	brcs	800022ac <idata_load_loop>

800022b4 <idata_load_loop_end>:
  mov     r2, 0
800022b4:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800022b8:	e0 61 06 38 	mov	r1,1592
  cp      r0, r1
  brlo    udata_clear_loop
800022bc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800022be:	c0 62       	brcc	800022ca <udata_clear_loop_end>
800022c0:	30 02       	mov	r2,0
800022c2:	30 03       	mov	r3,0

800022c4 <udata_clear_loop>:
800022c4:	a1 22       	st.d	r0++,r2
800022c6:	02 30       	cp.w	r0,r1
800022c8:	cf e3       	brcs	800022c4 <udata_clear_loop>

800022ca <udata_clear_loop_end>:
800022ca:	fe cf ff 4e 	sub	pc,pc,-178
800022ce:	d7 03       	nop

800022d0 <exercise_B>:
		}
	}
}

void exercise_B(void)
{
800022d0:	d4 31       	pushm	r0-r7,lr
800022d2:	20 1d       	sub	sp,4
	// Configure LEDS and QT
	config_led_gpio();
800022d4:	f0 1f 00 25 	mcall	80002368 <exercise_B+0x98>
	qt_sensor_t *qt = config_qt_gpio();
800022d8:	f0 1f 00 25 	mcall	8000236c <exercise_B+0x9c>
800022dc:	18 96       	mov	r6,r12
	evk_led_t evkled_b;
	memset(&evkled_b, 0, sizeof(evkled_b));
800022de:	30 08       	mov	r8,0
800022e0:	ba b8       	st.b	sp[0x3],r8
	
	while (1)
	{
		bool toggle = false;
		poll_qt_button(&qt->button_s._up, QT_PRESSED);
800022e2:	f8 c4 ff f4 	sub	r4,r12,-12
		poll_qt_button(&qt->button_s._down, QT_PRESSED);
800022e6:	f8 c3 ff f0 	sub	r3,r12,-16
		poll_qt_button(&qt->button_s._enter, QT_PRESSED);
800022ea:	18 92       	mov	r2,r12
	memset(&evkled_b, 0, sizeof(evkled_b));
	
	while (1)
	{
		bool toggle = false;
		poll_qt_button(&qt->button_s._up, QT_PRESSED);
800022ec:	30 07       	mov	r7,0
		poll_qt_button(&qt->button_s._down, QT_PRESSED);
		poll_qt_button(&qt->button_s._enter, QT_PRESSED);
		
		if (qt->button_s._up.active)
800022ee:	10 95       	mov	r5,r8
			toggle = true;
			set_ledx_num_b(evkled_b.ledx);
		}
		else if (qt->button_s._enter.active)
		{
			memset(&evkled_b, 0, sizeof(evkled_b));
800022f0:	fa c0 ff fd 	sub	r0,sp,-3
			set_ledx_num_b(evkled_b.ledx);
		}
		
		if (toggle)
		{
			gpio_tgl_gpio_pin(LED3_GPIO);
800022f4:	30 61       	mov	r1,6
	memset(&evkled_b, 0, sizeof(evkled_b));
	
	while (1)
	{
		bool toggle = false;
		poll_qt_button(&qt->button_s._up, QT_PRESSED);
800022f6:	0e 9b       	mov	r11,r7
800022f8:	08 9c       	mov	r12,r4
800022fa:	f0 1f 00 1e 	mcall	80002370 <exercise_B+0xa0>
		poll_qt_button(&qt->button_s._down, QT_PRESSED);
800022fe:	0e 9b       	mov	r11,r7
80002300:	06 9c       	mov	r12,r3
80002302:	f0 1f 00 1c 	mcall	80002370 <exercise_B+0xa0>
		poll_qt_button(&qt->button_s._enter, QT_PRESSED);
80002306:	0e 9b       	mov	r11,r7
80002308:	04 9c       	mov	r12,r2
8000230a:	f0 1f 00 1a 	mcall	80002370 <exercise_B+0xa0>
		
		if (qt->button_s._up.active)
8000230e:	ed 38 00 0f 	ld.ub	r8,r6[15]
80002312:	ea 08 18 00 	cp.b	r8,r5
80002316:	c0 d0       	breq	80002330 <exercise_B+0x60>
		{
			if ((evkled_b.ledx + 1) < 8)
80002318:	1b b8       	ld.ub	r8,sp[0x3]
8000231a:	f0 c9 ff ff 	sub	r9,r8,-1
				evkled_b.ledx++;
8000231e:	58 79       	cp.w	r9,7
80002320:	f7 b8 0a ff 	suble	r8,-1
80002324:	fb f8 ae 03 	st.ble	sp[0x3],r8
			toggle = true;
			set_ledx_num_b(evkled_b.ledx);
80002328:	1b bc       	ld.ub	r12,sp[0x3]
8000232a:	f0 1f 00 13 	mcall	80002374 <exercise_B+0xa4>
8000232e:	c1 98       	rjmp	80002360 <exercise_B+0x90>
		}
		else if (qt->button_s._down.active)
80002330:	ed 38 00 13 	ld.ub	r8,r6[19]
80002334:	ea 08 18 00 	cp.b	r8,r5
80002338:	c0 b0       	breq	8000234e <exercise_B+0x7e>
		{
			if ((evkled_b.ledx - 1) >= 0)
8000233a:	1b b8       	ld.ub	r8,sp[0x3]
8000233c:	f0 c9 00 01 	sub	r9,r8,1
80002340:	c0 36       	brmi	80002346 <exercise_B+0x76>
				evkled_b.ledx--;
80002342:	20 18       	sub	r8,1
80002344:	ba b8       	st.b	sp[0x3],r8
			toggle = true;
			set_ledx_num_b(evkled_b.ledx);
80002346:	1b bc       	ld.ub	r12,sp[0x3]
80002348:	f0 1f 00 0b 	mcall	80002374 <exercise_B+0xa4>
8000234c:	c0 a8       	rjmp	80002360 <exercise_B+0x90>
		}
		else if (qt->button_s._enter.active)
8000234e:	0d b8       	ld.ub	r8,r6[0x3]
80002350:	ea 08 18 00 	cp.b	r8,r5
80002354:	cd 10       	breq	800022f6 <exercise_B+0x26>
		{
			memset(&evkled_b, 0, sizeof(evkled_b));
80002356:	a0 85       	st.b	r0[0x0],r5
			set_ledx_num_b(evkled_b.ledx);
80002358:	30 0c       	mov	r12,0
8000235a:	f0 1f 00 07 	mcall	80002374 <exercise_B+0xa4>
8000235e:	cc cb       	rjmp	800022f6 <exercise_B+0x26>
		}
		
		if (toggle)
		{
			gpio_tgl_gpio_pin(LED3_GPIO);
80002360:	02 9c       	mov	r12,r1
80002362:	f0 1f 00 06 	mcall	80002378 <exercise_B+0xa8>
80002366:	cc 8b       	rjmp	800022f6 <exercise_B+0x26>
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	20 58       	sub	r8,5
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	20 d8       	sub	r8,13
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	20 9c       	sub	r12,9
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	20 2c       	sub	r12,2
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	22 3a       	sub	r10,35

8000237c <main>:

void exercise_A(void);
void exercise_B(void);

int main (void)
{
8000237c:	d4 01       	pushm	lr
	
	// Exercise A)
	//exercise_A();
	
	// Exercise B)
	exercise_B();
8000237e:	f0 1f 00 02 	mcall	80002384 <main+0x8>
		
}
80002382:	d8 0a       	popm	pc,r12=0
80002384:	80 00       	ld.sh	r0,r0[0x0]
80002386:	22 d0       	sub	r0,45

80002388 <malloc>:
80002388:	d4 01       	pushm	lr
8000238a:	e0 68 05 08 	mov	r8,1288
8000238e:	18 9b       	mov	r11,r12
80002390:	70 0c       	ld.w	r12,r8[0x0]
80002392:	c0 3c       	rcall	80002398 <_malloc_r>
80002394:	d8 02       	popm	pc
80002396:	d7 03       	nop

80002398 <_malloc_r>:
80002398:	d4 31       	pushm	r0-r7,lr
8000239a:	f6 c8 ff f5 	sub	r8,r11,-11
8000239e:	18 95       	mov	r5,r12
800023a0:	10 97       	mov	r7,r8
800023a2:	e0 17 ff f8 	andl	r7,0xfff8
800023a6:	59 68       	cp.w	r8,22
800023a8:	f9 b7 08 10 	movls	r7,16
800023ac:	16 37       	cp.w	r7,r11
800023ae:	5f 38       	srlo	r8
800023b0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800023b4:	c0 50       	breq	800023be <_malloc_r+0x26>
800023b6:	30 c8       	mov	r8,12
800023b8:	99 38       	st.w	r12[0xc],r8
800023ba:	e0 8f 01 ee 	bral	80002796 <_malloc_r+0x3fe>
800023be:	e0 a0 02 02 	rcall	800027c2 <__malloc_lock>
800023c2:	e0 47 01 f7 	cp.w	r7,503
800023c6:	e0 8b 00 1c 	brhi	800023fe <_malloc_r+0x66>
800023ca:	ee 03 16 03 	lsr	r3,r7,0x3
800023ce:	30 88       	mov	r8,8
800023d0:	f0 03 00 38 	add	r8,r8,r3<<0x3
800023d4:	70 36       	ld.w	r6,r8[0xc]
800023d6:	10 36       	cp.w	r6,r8
800023d8:	c0 61       	brne	800023e4 <_malloc_r+0x4c>
800023da:	ec c8 ff f8 	sub	r8,r6,-8
800023de:	70 36       	ld.w	r6,r8[0xc]
800023e0:	10 36       	cp.w	r6,r8
800023e2:	c0 c0       	breq	800023fa <_malloc_r+0x62>
800023e4:	6c 18       	ld.w	r8,r6[0x4]
800023e6:	e0 18 ff fc 	andl	r8,0xfffc
800023ea:	6c 3a       	ld.w	r10,r6[0xc]
800023ec:	ec 08 00 09 	add	r9,r6,r8
800023f0:	0a 9c       	mov	r12,r5
800023f2:	6c 28       	ld.w	r8,r6[0x8]
800023f4:	95 28       	st.w	r10[0x8],r8
800023f6:	91 3a       	st.w	r8[0xc],r10
800023f8:	c4 68       	rjmp	80002484 <_malloc_r+0xec>
800023fa:	2f e3       	sub	r3,-2
800023fc:	c4 c8       	rjmp	80002494 <_malloc_r+0xfc>
800023fe:	ee 03 16 09 	lsr	r3,r7,0x9
80002402:	c0 41       	brne	8000240a <_malloc_r+0x72>
80002404:	ee 03 16 03 	lsr	r3,r7,0x3
80002408:	c2 68       	rjmp	80002454 <_malloc_r+0xbc>
8000240a:	58 43       	cp.w	r3,4
8000240c:	e0 8b 00 06 	brhi	80002418 <_malloc_r+0x80>
80002410:	ee 03 16 06 	lsr	r3,r7,0x6
80002414:	2c 83       	sub	r3,-56
80002416:	c1 f8       	rjmp	80002454 <_malloc_r+0xbc>
80002418:	59 43       	cp.w	r3,20
8000241a:	e0 8b 00 04 	brhi	80002422 <_malloc_r+0x8a>
8000241e:	2a 53       	sub	r3,-91
80002420:	c1 a8       	rjmp	80002454 <_malloc_r+0xbc>
80002422:	e0 43 00 54 	cp.w	r3,84
80002426:	e0 8b 00 06 	brhi	80002432 <_malloc_r+0x9a>
8000242a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000242e:	29 23       	sub	r3,-110
80002430:	c1 28       	rjmp	80002454 <_malloc_r+0xbc>
80002432:	e0 43 01 54 	cp.w	r3,340
80002436:	e0 8b 00 06 	brhi	80002442 <_malloc_r+0xaa>
8000243a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000243e:	28 93       	sub	r3,-119
80002440:	c0 a8       	rjmp	80002454 <_malloc_r+0xbc>
80002442:	e0 43 05 54 	cp.w	r3,1364
80002446:	e0 88 00 04 	brls	8000244e <_malloc_r+0xb6>
8000244a:	37 e3       	mov	r3,126
8000244c:	c0 48       	rjmp	80002454 <_malloc_r+0xbc>
8000244e:	ee 03 16 12 	lsr	r3,r7,0x12
80002452:	28 43       	sub	r3,-124
80002454:	30 8a       	mov	r10,8
80002456:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000245a:	74 36       	ld.w	r6,r10[0xc]
8000245c:	c1 98       	rjmp	8000248e <_malloc_r+0xf6>
8000245e:	6c 19       	ld.w	r9,r6[0x4]
80002460:	e0 19 ff fc 	andl	r9,0xfffc
80002464:	f2 07 01 0b 	sub	r11,r9,r7
80002468:	58 fb       	cp.w	r11,15
8000246a:	e0 8a 00 04 	brle	80002472 <_malloc_r+0xda>
8000246e:	20 13       	sub	r3,1
80002470:	c1 18       	rjmp	80002492 <_malloc_r+0xfa>
80002472:	6c 38       	ld.w	r8,r6[0xc]
80002474:	58 0b       	cp.w	r11,0
80002476:	c0 b5       	brlt	8000248c <_malloc_r+0xf4>
80002478:	6c 2a       	ld.w	r10,r6[0x8]
8000247a:	ec 09 00 09 	add	r9,r6,r9
8000247e:	0a 9c       	mov	r12,r5
80002480:	91 2a       	st.w	r8[0x8],r10
80002482:	95 38       	st.w	r10[0xc],r8
80002484:	72 18       	ld.w	r8,r9[0x4]
80002486:	a1 a8       	sbr	r8,0x0
80002488:	93 18       	st.w	r9[0x4],r8
8000248a:	cb 88       	rjmp	800025fa <_malloc_r+0x262>
8000248c:	10 96       	mov	r6,r8
8000248e:	14 36       	cp.w	r6,r10
80002490:	ce 71       	brne	8000245e <_malloc_r+0xc6>
80002492:	2f f3       	sub	r3,-1
80002494:	30 8a       	mov	r10,8
80002496:	f4 cc ff f8 	sub	r12,r10,-8
8000249a:	78 26       	ld.w	r6,r12[0x8]
8000249c:	18 36       	cp.w	r6,r12
8000249e:	c6 a0       	breq	80002572 <_malloc_r+0x1da>
800024a0:	6c 19       	ld.w	r9,r6[0x4]
800024a2:	e0 19 ff fc 	andl	r9,0xfffc
800024a6:	f2 07 01 08 	sub	r8,r9,r7
800024aa:	58 f8       	cp.w	r8,15
800024ac:	e0 89 00 8c 	brgt	800025c4 <_malloc_r+0x22c>
800024b0:	99 3c       	st.w	r12[0xc],r12
800024b2:	99 2c       	st.w	r12[0x8],r12
800024b4:	58 08       	cp.w	r8,0
800024b6:	c0 55       	brlt	800024c0 <_malloc_r+0x128>
800024b8:	ec 09 00 09 	add	r9,r6,r9
800024bc:	0a 9c       	mov	r12,r5
800024be:	ce 3b       	rjmp	80002484 <_malloc_r+0xec>
800024c0:	e0 49 01 ff 	cp.w	r9,511
800024c4:	e0 8b 00 13 	brhi	800024ea <_malloc_r+0x152>
800024c8:	a3 99       	lsr	r9,0x3
800024ca:	f4 09 00 38 	add	r8,r10,r9<<0x3
800024ce:	70 2b       	ld.w	r11,r8[0x8]
800024d0:	8d 38       	st.w	r6[0xc],r8
800024d2:	8d 2b       	st.w	r6[0x8],r11
800024d4:	97 36       	st.w	r11[0xc],r6
800024d6:	91 26       	st.w	r8[0x8],r6
800024d8:	a3 49       	asr	r9,0x2
800024da:	74 18       	ld.w	r8,r10[0x4]
800024dc:	30 1b       	mov	r11,1
800024de:	f6 09 09 49 	lsl	r9,r11,r9
800024e2:	f1 e9 10 09 	or	r9,r8,r9
800024e6:	95 19       	st.w	r10[0x4],r9
800024e8:	c4 58       	rjmp	80002572 <_malloc_r+0x1da>
800024ea:	f2 0a 16 09 	lsr	r10,r9,0x9
800024ee:	58 4a       	cp.w	r10,4
800024f0:	e0 8b 00 06 	brhi	800024fc <_malloc_r+0x164>
800024f4:	f2 0a 16 06 	lsr	r10,r9,0x6
800024f8:	2c 8a       	sub	r10,-56
800024fa:	c1 f8       	rjmp	80002538 <_malloc_r+0x1a0>
800024fc:	59 4a       	cp.w	r10,20
800024fe:	e0 8b 00 04 	brhi	80002506 <_malloc_r+0x16e>
80002502:	2a 5a       	sub	r10,-91
80002504:	c1 a8       	rjmp	80002538 <_malloc_r+0x1a0>
80002506:	e0 4a 00 54 	cp.w	r10,84
8000250a:	e0 8b 00 06 	brhi	80002516 <_malloc_r+0x17e>
8000250e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002512:	29 2a       	sub	r10,-110
80002514:	c1 28       	rjmp	80002538 <_malloc_r+0x1a0>
80002516:	e0 4a 01 54 	cp.w	r10,340
8000251a:	e0 8b 00 06 	brhi	80002526 <_malloc_r+0x18e>
8000251e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80002522:	28 9a       	sub	r10,-119
80002524:	c0 a8       	rjmp	80002538 <_malloc_r+0x1a0>
80002526:	e0 4a 05 54 	cp.w	r10,1364
8000252a:	e0 88 00 04 	brls	80002532 <_malloc_r+0x19a>
8000252e:	37 ea       	mov	r10,126
80002530:	c0 48       	rjmp	80002538 <_malloc_r+0x1a0>
80002532:	f2 0a 16 12 	lsr	r10,r9,0x12
80002536:	28 4a       	sub	r10,-124
80002538:	30 8b       	mov	r11,8
8000253a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000253e:	68 28       	ld.w	r8,r4[0x8]
80002540:	08 38       	cp.w	r8,r4
80002542:	c0 e1       	brne	8000255e <_malloc_r+0x1c6>
80002544:	76 19       	ld.w	r9,r11[0x4]
80002546:	a3 4a       	asr	r10,0x2
80002548:	30 1e       	mov	lr,1
8000254a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000254e:	f3 ea 10 0a 	or	r10,r9,r10
80002552:	10 99       	mov	r9,r8
80002554:	97 1a       	st.w	r11[0x4],r10
80002556:	c0 a8       	rjmp	8000256a <_malloc_r+0x1d2>
80002558:	70 28       	ld.w	r8,r8[0x8]
8000255a:	08 38       	cp.w	r8,r4
8000255c:	c0 60       	breq	80002568 <_malloc_r+0x1d0>
8000255e:	70 1a       	ld.w	r10,r8[0x4]
80002560:	e0 1a ff fc 	andl	r10,0xfffc
80002564:	14 39       	cp.w	r9,r10
80002566:	cf 93       	brcs	80002558 <_malloc_r+0x1c0>
80002568:	70 39       	ld.w	r9,r8[0xc]
8000256a:	8d 39       	st.w	r6[0xc],r9
8000256c:	8d 28       	st.w	r6[0x8],r8
8000256e:	91 36       	st.w	r8[0xc],r6
80002570:	93 26       	st.w	r9[0x8],r6
80002572:	e6 08 14 02 	asr	r8,r3,0x2
80002576:	30 1b       	mov	r11,1
80002578:	30 84       	mov	r4,8
8000257a:	f6 08 09 4b 	lsl	r11,r11,r8
8000257e:	68 18       	ld.w	r8,r4[0x4]
80002580:	10 3b       	cp.w	r11,r8
80002582:	e0 8b 00 69 	brhi	80002654 <_malloc_r+0x2bc>
80002586:	f7 e8 00 09 	and	r9,r11,r8
8000258a:	c0 b1       	brne	800025a0 <_malloc_r+0x208>
8000258c:	e0 13 ff fc 	andl	r3,0xfffc
80002590:	a1 7b       	lsl	r11,0x1
80002592:	2f c3       	sub	r3,-4
80002594:	c0 38       	rjmp	8000259a <_malloc_r+0x202>
80002596:	2f c3       	sub	r3,-4
80002598:	a1 7b       	lsl	r11,0x1
8000259a:	f7 e8 00 09 	and	r9,r11,r8
8000259e:	cf c0       	breq	80002596 <_malloc_r+0x1fe>
800025a0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800025a4:	06 92       	mov	r2,r3
800025a6:	1c 91       	mov	r1,lr
800025a8:	62 36       	ld.w	r6,r1[0xc]
800025aa:	c2 d8       	rjmp	80002604 <_malloc_r+0x26c>
800025ac:	6c 1a       	ld.w	r10,r6[0x4]
800025ae:	e0 1a ff fc 	andl	r10,0xfffc
800025b2:	f4 07 01 08 	sub	r8,r10,r7
800025b6:	58 f8       	cp.w	r8,15
800025b8:	e0 8a 00 15 	brle	800025e2 <_malloc_r+0x24a>
800025bc:	6c 3a       	ld.w	r10,r6[0xc]
800025be:	6c 29       	ld.w	r9,r6[0x8]
800025c0:	95 29       	st.w	r10[0x8],r9
800025c2:	93 3a       	st.w	r9[0xc],r10
800025c4:	0e 99       	mov	r9,r7
800025c6:	ec 07 00 07 	add	r7,r6,r7
800025ca:	a1 a9       	sbr	r9,0x0
800025cc:	99 37       	st.w	r12[0xc],r7
800025ce:	99 27       	st.w	r12[0x8],r7
800025d0:	8d 19       	st.w	r6[0x4],r9
800025d2:	ee 08 09 08 	st.w	r7[r8],r8
800025d6:	8f 2c       	st.w	r7[0x8],r12
800025d8:	8f 3c       	st.w	r7[0xc],r12
800025da:	a1 a8       	sbr	r8,0x0
800025dc:	0a 9c       	mov	r12,r5
800025de:	8f 18       	st.w	r7[0x4],r8
800025e0:	c0 d8       	rjmp	800025fa <_malloc_r+0x262>
800025e2:	6c 39       	ld.w	r9,r6[0xc]
800025e4:	58 08       	cp.w	r8,0
800025e6:	c0 e5       	brlt	80002602 <_malloc_r+0x26a>
800025e8:	ec 0a 00 0a 	add	r10,r6,r10
800025ec:	74 18       	ld.w	r8,r10[0x4]
800025ee:	a1 a8       	sbr	r8,0x0
800025f0:	0a 9c       	mov	r12,r5
800025f2:	95 18       	st.w	r10[0x4],r8
800025f4:	6c 28       	ld.w	r8,r6[0x8]
800025f6:	93 28       	st.w	r9[0x8],r8
800025f8:	91 39       	st.w	r8[0xc],r9
800025fa:	ce 5c       	rcall	800027c4 <__malloc_unlock>
800025fc:	ec cc ff f8 	sub	r12,r6,-8
80002600:	d8 32       	popm	r0-r7,pc
80002602:	12 96       	mov	r6,r9
80002604:	02 36       	cp.w	r6,r1
80002606:	cd 31       	brne	800025ac <_malloc_r+0x214>
80002608:	2f f2       	sub	r2,-1
8000260a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000260e:	c0 30       	breq	80002614 <_malloc_r+0x27c>
80002610:	2f 81       	sub	r1,-8
80002612:	cc bb       	rjmp	800025a8 <_malloc_r+0x210>
80002614:	1c 98       	mov	r8,lr
80002616:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000261a:	c0 81       	brne	8000262a <_malloc_r+0x292>
8000261c:	68 19       	ld.w	r9,r4[0x4]
8000261e:	f6 08 11 ff 	rsub	r8,r11,-1
80002622:	f3 e8 00 08 	and	r8,r9,r8
80002626:	89 18       	st.w	r4[0x4],r8
80002628:	c0 78       	rjmp	80002636 <_malloc_r+0x29e>
8000262a:	f0 c9 00 08 	sub	r9,r8,8
8000262e:	20 13       	sub	r3,1
80002630:	70 08       	ld.w	r8,r8[0x0]
80002632:	12 38       	cp.w	r8,r9
80002634:	cf 10       	breq	80002616 <_malloc_r+0x27e>
80002636:	a1 7b       	lsl	r11,0x1
80002638:	68 18       	ld.w	r8,r4[0x4]
8000263a:	10 3b       	cp.w	r11,r8
8000263c:	e0 8b 00 0c 	brhi	80002654 <_malloc_r+0x2bc>
80002640:	58 0b       	cp.w	r11,0
80002642:	c0 90       	breq	80002654 <_malloc_r+0x2bc>
80002644:	04 93       	mov	r3,r2
80002646:	c0 38       	rjmp	8000264c <_malloc_r+0x2b4>
80002648:	2f c3       	sub	r3,-4
8000264a:	a1 7b       	lsl	r11,0x1
8000264c:	f7 e8 00 09 	and	r9,r11,r8
80002650:	ca 81       	brne	800025a0 <_malloc_r+0x208>
80002652:	cf bb       	rjmp	80002648 <_malloc_r+0x2b0>
80002654:	68 23       	ld.w	r3,r4[0x8]
80002656:	66 12       	ld.w	r2,r3[0x4]
80002658:	e0 12 ff fc 	andl	r2,0xfffc
8000265c:	0e 32       	cp.w	r2,r7
8000265e:	5f 39       	srlo	r9
80002660:	e4 07 01 08 	sub	r8,r2,r7
80002664:	58 f8       	cp.w	r8,15
80002666:	5f aa       	srle	r10
80002668:	f5 e9 10 09 	or	r9,r10,r9
8000266c:	e0 80 00 96 	breq	80002798 <_malloc_r+0x400>
80002670:	e0 68 06 04 	mov	r8,1540
80002674:	70 01       	ld.w	r1,r8[0x0]
80002676:	e0 68 04 14 	mov	r8,1044
8000267a:	2f 01       	sub	r1,-16
8000267c:	70 08       	ld.w	r8,r8[0x0]
8000267e:	0e 01       	add	r1,r7
80002680:	5b f8       	cp.w	r8,-1
80002682:	c0 40       	breq	8000268a <_malloc_r+0x2f2>
80002684:	28 11       	sub	r1,-127
80002686:	e0 11 ff 80 	andl	r1,0xff80
8000268a:	02 9b       	mov	r11,r1
8000268c:	0a 9c       	mov	r12,r5
8000268e:	c9 dc       	rcall	800027c8 <_sbrk_r>
80002690:	18 96       	mov	r6,r12
80002692:	5b fc       	cp.w	r12,-1
80002694:	c7 30       	breq	8000277a <_malloc_r+0x3e2>
80002696:	e6 02 00 08 	add	r8,r3,r2
8000269a:	10 3c       	cp.w	r12,r8
8000269c:	c0 32       	brcc	800026a2 <_malloc_r+0x30a>
8000269e:	08 33       	cp.w	r3,r4
800026a0:	c6 d1       	brne	8000277a <_malloc_r+0x3e2>
800026a2:	e0 6a 06 08 	mov	r10,1544
800026a6:	74 09       	ld.w	r9,r10[0x0]
800026a8:	e2 09 00 09 	add	r9,r1,r9
800026ac:	95 09       	st.w	r10[0x0],r9
800026ae:	10 36       	cp.w	r6,r8
800026b0:	c0 a1       	brne	800026c4 <_malloc_r+0x32c>
800026b2:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800026b6:	c0 71       	brne	800026c4 <_malloc_r+0x32c>
800026b8:	e2 02 00 02 	add	r2,r1,r2
800026bc:	68 28       	ld.w	r8,r4[0x8]
800026be:	a1 a2       	sbr	r2,0x0
800026c0:	91 12       	st.w	r8[0x4],r2
800026c2:	c4 d8       	rjmp	8000275c <_malloc_r+0x3c4>
800026c4:	e0 6a 04 14 	mov	r10,1044
800026c8:	74 0b       	ld.w	r11,r10[0x0]
800026ca:	5b fb       	cp.w	r11,-1
800026cc:	c0 31       	brne	800026d2 <_malloc_r+0x33a>
800026ce:	95 06       	st.w	r10[0x0],r6
800026d0:	c0 78       	rjmp	800026de <_malloc_r+0x346>
800026d2:	ec 09 00 09 	add	r9,r6,r9
800026d6:	e0 6a 06 08 	mov	r10,1544
800026da:	10 19       	sub	r9,r8
800026dc:	95 09       	st.w	r10[0x0],r9
800026de:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800026e2:	f0 09 11 08 	rsub	r9,r8,8
800026e6:	58 08       	cp.w	r8,0
800026e8:	f2 08 17 10 	movne	r8,r9
800026ec:	ed d8 e1 06 	addne	r6,r6,r8
800026f0:	28 08       	sub	r8,-128
800026f2:	ec 01 00 01 	add	r1,r6,r1
800026f6:	0a 9c       	mov	r12,r5
800026f8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800026fc:	f0 01 01 01 	sub	r1,r8,r1
80002700:	02 9b       	mov	r11,r1
80002702:	c6 3c       	rcall	800027c8 <_sbrk_r>
80002704:	e0 68 06 08 	mov	r8,1544
80002708:	5b fc       	cp.w	r12,-1
8000270a:	ec 0c 17 00 	moveq	r12,r6
8000270e:	f9 b1 00 00 	moveq	r1,0
80002712:	70 09       	ld.w	r9,r8[0x0]
80002714:	0c 1c       	sub	r12,r6
80002716:	89 26       	st.w	r4[0x8],r6
80002718:	02 0c       	add	r12,r1
8000271a:	12 01       	add	r1,r9
8000271c:	a1 ac       	sbr	r12,0x0
8000271e:	91 01       	st.w	r8[0x0],r1
80002720:	8d 1c       	st.w	r6[0x4],r12
80002722:	08 33       	cp.w	r3,r4
80002724:	c1 c0       	breq	8000275c <_malloc_r+0x3c4>
80002726:	58 f2       	cp.w	r2,15
80002728:	e0 8b 00 05 	brhi	80002732 <_malloc_r+0x39a>
8000272c:	30 18       	mov	r8,1
8000272e:	8d 18       	st.w	r6[0x4],r8
80002730:	c2 58       	rjmp	8000277a <_malloc_r+0x3e2>
80002732:	30 59       	mov	r9,5
80002734:	20 c2       	sub	r2,12
80002736:	e0 12 ff f8 	andl	r2,0xfff8
8000273a:	e6 02 00 08 	add	r8,r3,r2
8000273e:	91 29       	st.w	r8[0x8],r9
80002740:	91 19       	st.w	r8[0x4],r9
80002742:	66 18       	ld.w	r8,r3[0x4]
80002744:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002748:	e5 e8 10 08 	or	r8,r2,r8
8000274c:	87 18       	st.w	r3[0x4],r8
8000274e:	58 f2       	cp.w	r2,15
80002750:	e0 88 00 06 	brls	8000275c <_malloc_r+0x3c4>
80002754:	e6 cb ff f8 	sub	r11,r3,-8
80002758:	0a 9c       	mov	r12,r5
8000275a:	ca dc       	rcall	800028b4 <_free_r>
8000275c:	e0 69 06 00 	mov	r9,1536
80002760:	72 0a       	ld.w	r10,r9[0x0]
80002762:	e0 68 06 08 	mov	r8,1544
80002766:	70 08       	ld.w	r8,r8[0x0]
80002768:	14 38       	cp.w	r8,r10
8000276a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000276e:	e0 69 05 fc 	mov	r9,1532
80002772:	72 0a       	ld.w	r10,r9[0x0]
80002774:	14 38       	cp.w	r8,r10
80002776:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000277a:	68 28       	ld.w	r8,r4[0x8]
8000277c:	70 18       	ld.w	r8,r8[0x4]
8000277e:	e0 18 ff fc 	andl	r8,0xfffc
80002782:	0e 38       	cp.w	r8,r7
80002784:	5f 39       	srlo	r9
80002786:	0e 18       	sub	r8,r7
80002788:	58 f8       	cp.w	r8,15
8000278a:	5f aa       	srle	r10
8000278c:	f5 e9 10 09 	or	r9,r10,r9
80002790:	c0 40       	breq	80002798 <_malloc_r+0x400>
80002792:	0a 9c       	mov	r12,r5
80002794:	c1 8c       	rcall	800027c4 <__malloc_unlock>
80002796:	d8 3a       	popm	r0-r7,pc,r12=0
80002798:	68 26       	ld.w	r6,r4[0x8]
8000279a:	a1 a8       	sbr	r8,0x0
8000279c:	0e 99       	mov	r9,r7
8000279e:	a1 a9       	sbr	r9,0x0
800027a0:	8d 19       	st.w	r6[0x4],r9
800027a2:	ec 07 00 07 	add	r7,r6,r7
800027a6:	0a 9c       	mov	r12,r5
800027a8:	89 27       	st.w	r4[0x8],r7
800027aa:	8f 18       	st.w	r7[0x4],r8
800027ac:	c0 cc       	rcall	800027c4 <__malloc_unlock>
800027ae:	ec cc ff f8 	sub	r12,r6,-8
800027b2:	d8 32       	popm	r0-r7,pc

800027b4 <memset>:
800027b4:	18 98       	mov	r8,r12
800027b6:	c0 38       	rjmp	800027bc <memset+0x8>
800027b8:	10 cb       	st.b	r8++,r11
800027ba:	20 1a       	sub	r10,1
800027bc:	58 0a       	cp.w	r10,0
800027be:	cf d1       	brne	800027b8 <memset+0x4>
800027c0:	5e fc       	retal	r12

800027c2 <__malloc_lock>:
800027c2:	5e fc       	retal	r12

800027c4 <__malloc_unlock>:
800027c4:	5e fc       	retal	r12
800027c6:	d7 03       	nop

800027c8 <_sbrk_r>:
800027c8:	d4 21       	pushm	r4-r7,lr
800027ca:	30 08       	mov	r8,0
800027cc:	18 97       	mov	r7,r12
800027ce:	e0 66 06 34 	mov	r6,1588
800027d2:	16 9c       	mov	r12,r11
800027d4:	8d 08       	st.w	r6[0x0],r8
800027d6:	c0 9c       	rcall	800027e8 <_sbrk>
800027d8:	5b fc       	cp.w	r12,-1
800027da:	c0 51       	brne	800027e4 <_sbrk_r+0x1c>
800027dc:	6c 08       	ld.w	r8,r6[0x0]
800027de:	58 08       	cp.w	r8,0
800027e0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800027e4:	d8 22       	popm	r4-r7,pc
800027e6:	d7 03       	nop

800027e8 <_sbrk>:
800027e8:	d4 01       	pushm	lr
800027ea:	e0 68 06 30 	mov	r8,1584
800027ee:	70 09       	ld.w	r9,r8[0x0]
800027f0:	58 09       	cp.w	r9,0
800027f2:	c0 41       	brne	800027fa <_sbrk+0x12>
800027f4:	e0 69 06 38 	mov	r9,1592
800027f8:	91 09       	st.w	r8[0x0],r9
800027fa:	e0 69 06 30 	mov	r9,1584
800027fe:	e0 6a f0 00 	mov	r10,61440
80002802:	72 08       	ld.w	r8,r9[0x0]
80002804:	f0 0c 00 0c 	add	r12,r8,r12
80002808:	14 3c       	cp.w	r12,r10
8000280a:	e0 8b 00 04 	brhi	80002812 <_sbrk+0x2a>
8000280e:	93 0c       	st.w	r9[0x0],r12
80002810:	c0 58       	rjmp	8000281a <_sbrk+0x32>
80002812:	c0 7c       	rcall	80002820 <__errno>
80002814:	30 c8       	mov	r8,12
80002816:	99 08       	st.w	r12[0x0],r8
80002818:	3f f8       	mov	r8,-1
8000281a:	10 9c       	mov	r12,r8
8000281c:	d8 02       	popm	pc
8000281e:	d7 03       	nop

80002820 <__errno>:
80002820:	e0 68 05 08 	mov	r8,1288
80002824:	70 0c       	ld.w	r12,r8[0x0]
80002826:	2f 4c       	sub	r12,-12
80002828:	5e fc       	retal	r12
8000282a:	d7 03       	nop

8000282c <_malloc_trim_r>:
8000282c:	d4 21       	pushm	r4-r7,lr
8000282e:	16 95       	mov	r5,r11
80002830:	18 97       	mov	r7,r12
80002832:	cc 8f       	rcall	800027c2 <__malloc_lock>
80002834:	30 84       	mov	r4,8
80002836:	68 28       	ld.w	r8,r4[0x8]
80002838:	70 16       	ld.w	r6,r8[0x4]
8000283a:	e0 16 ff fc 	andl	r6,0xfffc
8000283e:	ec c8 ff 91 	sub	r8,r6,-111
80002842:	f0 05 01 05 	sub	r5,r8,r5
80002846:	e0 15 ff 80 	andl	r5,0xff80
8000284a:	ea c5 00 80 	sub	r5,r5,128
8000284e:	e0 45 00 7f 	cp.w	r5,127
80002852:	e0 8a 00 22 	brle	80002896 <_malloc_trim_r+0x6a>
80002856:	30 0b       	mov	r11,0
80002858:	0e 9c       	mov	r12,r7
8000285a:	cb 7f       	rcall	800027c8 <_sbrk_r>
8000285c:	68 28       	ld.w	r8,r4[0x8]
8000285e:	0c 08       	add	r8,r6
80002860:	10 3c       	cp.w	r12,r8
80002862:	c1 a1       	brne	80002896 <_malloc_trim_r+0x6a>
80002864:	ea 0b 11 00 	rsub	r11,r5,0
80002868:	0e 9c       	mov	r12,r7
8000286a:	ca ff       	rcall	800027c8 <_sbrk_r>
8000286c:	5b fc       	cp.w	r12,-1
8000286e:	c1 71       	brne	8000289c <_malloc_trim_r+0x70>
80002870:	30 0b       	mov	r11,0
80002872:	0e 9c       	mov	r12,r7
80002874:	ca af       	rcall	800027c8 <_sbrk_r>
80002876:	68 28       	ld.w	r8,r4[0x8]
80002878:	f8 08 01 09 	sub	r9,r12,r8
8000287c:	58 f9       	cp.w	r9,15
8000287e:	e0 8a 00 0c 	brle	80002896 <_malloc_trim_r+0x6a>
80002882:	a1 a9       	sbr	r9,0x0
80002884:	91 19       	st.w	r8[0x4],r9
80002886:	e0 68 04 14 	mov	r8,1044
8000288a:	70 09       	ld.w	r9,r8[0x0]
8000288c:	e0 68 06 08 	mov	r8,1544
80002890:	f8 09 01 09 	sub	r9,r12,r9
80002894:	91 09       	st.w	r8[0x0],r9
80002896:	0e 9c       	mov	r12,r7
80002898:	c9 6f       	rcall	800027c4 <__malloc_unlock>
8000289a:	d8 2a       	popm	r4-r7,pc,r12=0
8000289c:	68 28       	ld.w	r8,r4[0x8]
8000289e:	0a 16       	sub	r6,r5
800028a0:	a1 a6       	sbr	r6,0x0
800028a2:	91 16       	st.w	r8[0x4],r6
800028a4:	e0 68 06 08 	mov	r8,1544
800028a8:	70 09       	ld.w	r9,r8[0x0]
800028aa:	0a 19       	sub	r9,r5
800028ac:	0e 9c       	mov	r12,r7
800028ae:	91 09       	st.w	r8[0x0],r9
800028b0:	c8 af       	rcall	800027c4 <__malloc_unlock>
800028b2:	da 2a       	popm	r4-r7,pc,r12=1

800028b4 <_free_r>:
800028b4:	d4 21       	pushm	r4-r7,lr
800028b6:	16 96       	mov	r6,r11
800028b8:	18 97       	mov	r7,r12
800028ba:	58 0b       	cp.w	r11,0
800028bc:	e0 80 00 bb 	breq	80002a32 <_free_r+0x17e>
800028c0:	c8 1f       	rcall	800027c2 <__malloc_lock>
800028c2:	20 86       	sub	r6,8
800028c4:	30 8a       	mov	r10,8
800028c6:	6c 18       	ld.w	r8,r6[0x4]
800028c8:	74 2e       	ld.w	lr,r10[0x8]
800028ca:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800028ce:	a1 c8       	cbr	r8,0x0
800028d0:	ec 08 00 09 	add	r9,r6,r8
800028d4:	72 1b       	ld.w	r11,r9[0x4]
800028d6:	e0 1b ff fc 	andl	r11,0xfffc
800028da:	1c 39       	cp.w	r9,lr
800028dc:	c1 d1       	brne	80002916 <_free_r+0x62>
800028de:	f6 08 00 08 	add	r8,r11,r8
800028e2:	58 0c       	cp.w	r12,0
800028e4:	c0 81       	brne	800028f4 <_free_r+0x40>
800028e6:	6c 09       	ld.w	r9,r6[0x0]
800028e8:	12 16       	sub	r6,r9
800028ea:	12 08       	add	r8,r9
800028ec:	6c 3b       	ld.w	r11,r6[0xc]
800028ee:	6c 29       	ld.w	r9,r6[0x8]
800028f0:	97 29       	st.w	r11[0x8],r9
800028f2:	93 3b       	st.w	r9[0xc],r11
800028f4:	10 99       	mov	r9,r8
800028f6:	95 26       	st.w	r10[0x8],r6
800028f8:	a1 a9       	sbr	r9,0x0
800028fa:	8d 19       	st.w	r6[0x4],r9
800028fc:	e0 69 04 10 	mov	r9,1040
80002900:	72 09       	ld.w	r9,r9[0x0]
80002902:	12 38       	cp.w	r8,r9
80002904:	c0 63       	brcs	80002910 <_free_r+0x5c>
80002906:	e0 68 06 04 	mov	r8,1540
8000290a:	0e 9c       	mov	r12,r7
8000290c:	70 0b       	ld.w	r11,r8[0x0]
8000290e:	c8 ff       	rcall	8000282c <_malloc_trim_r>
80002910:	0e 9c       	mov	r12,r7
80002912:	c5 9f       	rcall	800027c4 <__malloc_unlock>
80002914:	d8 22       	popm	r4-r7,pc
80002916:	93 1b       	st.w	r9[0x4],r11
80002918:	58 0c       	cp.w	r12,0
8000291a:	c0 30       	breq	80002920 <_free_r+0x6c>
8000291c:	30 0c       	mov	r12,0
8000291e:	c1 08       	rjmp	8000293e <_free_r+0x8a>
80002920:	6c 0e       	ld.w	lr,r6[0x0]
80002922:	f4 c5 ff f8 	sub	r5,r10,-8
80002926:	1c 16       	sub	r6,lr
80002928:	1c 08       	add	r8,lr
8000292a:	6c 2e       	ld.w	lr,r6[0x8]
8000292c:	0a 3e       	cp.w	lr,r5
8000292e:	f9 bc 00 01 	moveq	r12,1
80002932:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80002936:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000293a:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000293e:	f2 0b 00 0e 	add	lr,r9,r11
80002942:	7c 1e       	ld.w	lr,lr[0x4]
80002944:	ed be 00 00 	bld	lr,0x0
80002948:	c1 30       	breq	8000296e <_free_r+0xba>
8000294a:	16 08       	add	r8,r11
8000294c:	58 0c       	cp.w	r12,0
8000294e:	c0 c1       	brne	80002966 <_free_r+0xb2>
80002950:	30 8e       	mov	lr,8
80002952:	72 2b       	ld.w	r11,r9[0x8]
80002954:	2f 8e       	sub	lr,-8
80002956:	1c 3b       	cp.w	r11,lr
80002958:	c0 71       	brne	80002966 <_free_r+0xb2>
8000295a:	97 36       	st.w	r11[0xc],r6
8000295c:	97 26       	st.w	r11[0x8],r6
8000295e:	8d 2b       	st.w	r6[0x8],r11
80002960:	8d 3b       	st.w	r6[0xc],r11
80002962:	30 1c       	mov	r12,1
80002964:	c0 58       	rjmp	8000296e <_free_r+0xba>
80002966:	72 2b       	ld.w	r11,r9[0x8]
80002968:	72 39       	ld.w	r9,r9[0xc]
8000296a:	93 2b       	st.w	r9[0x8],r11
8000296c:	97 39       	st.w	r11[0xc],r9
8000296e:	10 99       	mov	r9,r8
80002970:	ec 08 09 08 	st.w	r6[r8],r8
80002974:	a1 a9       	sbr	r9,0x0
80002976:	8d 19       	st.w	r6[0x4],r9
80002978:	58 0c       	cp.w	r12,0
8000297a:	c5 a1       	brne	80002a2e <_free_r+0x17a>
8000297c:	e0 48 01 ff 	cp.w	r8,511
80002980:	e0 8b 00 13 	brhi	800029a6 <_free_r+0xf2>
80002984:	a3 98       	lsr	r8,0x3
80002986:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000298a:	72 2b       	ld.w	r11,r9[0x8]
8000298c:	8d 39       	st.w	r6[0xc],r9
8000298e:	8d 2b       	st.w	r6[0x8],r11
80002990:	97 36       	st.w	r11[0xc],r6
80002992:	93 26       	st.w	r9[0x8],r6
80002994:	a3 48       	asr	r8,0x2
80002996:	74 19       	ld.w	r9,r10[0x4]
80002998:	30 1b       	mov	r11,1
8000299a:	f6 08 09 48 	lsl	r8,r11,r8
8000299e:	f3 e8 10 08 	or	r8,r9,r8
800029a2:	95 18       	st.w	r10[0x4],r8
800029a4:	c4 58       	rjmp	80002a2e <_free_r+0x17a>
800029a6:	f0 0b 16 09 	lsr	r11,r8,0x9
800029aa:	58 4b       	cp.w	r11,4
800029ac:	e0 8b 00 06 	brhi	800029b8 <_free_r+0x104>
800029b0:	f0 0b 16 06 	lsr	r11,r8,0x6
800029b4:	2c 8b       	sub	r11,-56
800029b6:	c2 08       	rjmp	800029f6 <_free_r+0x142>
800029b8:	59 4b       	cp.w	r11,20
800029ba:	e0 8b 00 04 	brhi	800029c2 <_free_r+0x10e>
800029be:	2a 5b       	sub	r11,-91
800029c0:	c1 b8       	rjmp	800029f6 <_free_r+0x142>
800029c2:	e0 4b 00 54 	cp.w	r11,84
800029c6:	e0 8b 00 06 	brhi	800029d2 <_free_r+0x11e>
800029ca:	f0 0b 16 0c 	lsr	r11,r8,0xc
800029ce:	29 2b       	sub	r11,-110
800029d0:	c1 38       	rjmp	800029f6 <_free_r+0x142>
800029d2:	e0 4b 01 54 	cp.w	r11,340
800029d6:	e0 8b 00 06 	brhi	800029e2 <_free_r+0x12e>
800029da:	f0 0b 16 0f 	lsr	r11,r8,0xf
800029de:	28 9b       	sub	r11,-119
800029e0:	c0 b8       	rjmp	800029f6 <_free_r+0x142>
800029e2:	e0 4b 05 54 	cp.w	r11,1364
800029e6:	e0 88 00 05 	brls	800029f0 <_free_r+0x13c>
800029ea:	37 eb       	mov	r11,126
800029ec:	c0 58       	rjmp	800029f6 <_free_r+0x142>
800029ee:	d7 03       	nop
800029f0:	f0 0b 16 12 	lsr	r11,r8,0x12
800029f4:	28 4b       	sub	r11,-124
800029f6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800029fa:	78 29       	ld.w	r9,r12[0x8]
800029fc:	18 39       	cp.w	r9,r12
800029fe:	c0 e1       	brne	80002a1a <_free_r+0x166>
80002a00:	74 18       	ld.w	r8,r10[0x4]
80002a02:	a3 4b       	asr	r11,0x2
80002a04:	30 1c       	mov	r12,1
80002a06:	f8 0b 09 4b 	lsl	r11,r12,r11
80002a0a:	f1 eb 10 0b 	or	r11,r8,r11
80002a0e:	12 98       	mov	r8,r9
80002a10:	95 1b       	st.w	r10[0x4],r11
80002a12:	c0 a8       	rjmp	80002a26 <_free_r+0x172>
80002a14:	72 29       	ld.w	r9,r9[0x8]
80002a16:	18 39       	cp.w	r9,r12
80002a18:	c0 60       	breq	80002a24 <_free_r+0x170>
80002a1a:	72 1a       	ld.w	r10,r9[0x4]
80002a1c:	e0 1a ff fc 	andl	r10,0xfffc
80002a20:	14 38       	cp.w	r8,r10
80002a22:	cf 93       	brcs	80002a14 <_free_r+0x160>
80002a24:	72 38       	ld.w	r8,r9[0xc]
80002a26:	8d 38       	st.w	r6[0xc],r8
80002a28:	8d 29       	st.w	r6[0x8],r9
80002a2a:	93 36       	st.w	r9[0xc],r6
80002a2c:	91 26       	st.w	r8[0x8],r6
80002a2e:	0e 9c       	mov	r12,r7
80002a30:	cc ae       	rcall	800027c4 <__malloc_unlock>
80002a32:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80002c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002c00:	c0 08       	rjmp	80002c00 <_evba>
	...

80002c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002c04:	c0 08       	rjmp	80002c04 <_handle_TLB_Multiple_Hit>
	...

80002c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002c08:	c0 08       	rjmp	80002c08 <_handle_Bus_Error_Data_Fetch>
	...

80002c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80002c0c:	c0 08       	rjmp	80002c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002c10:	c0 08       	rjmp	80002c10 <_handle_NMI>
	...

80002c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002c14:	c0 08       	rjmp	80002c14 <_handle_Instruction_Address>
	...

80002c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002c18:	c0 08       	rjmp	80002c18 <_handle_ITLB_Protection>
	...

80002c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80002c1c:	c0 08       	rjmp	80002c1c <_handle_Breakpoint>
	...

80002c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002c20:	c0 08       	rjmp	80002c20 <_handle_Illegal_Opcode>
	...

80002c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002c24:	c0 08       	rjmp	80002c24 <_handle_Unimplemented_Instruction>
	...

80002c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002c28:	c0 08       	rjmp	80002c28 <_handle_Privilege_Violation>
	...

80002c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80002c2c:	c0 08       	rjmp	80002c2c <_handle_Floating_Point>
	...

80002c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002c30:	c0 08       	rjmp	80002c30 <_handle_Coprocessor_Absent>
	...

80002c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002c34:	c0 08       	rjmp	80002c34 <_handle_Data_Address_Read>
	...

80002c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002c38:	c0 08       	rjmp	80002c38 <_handle_Data_Address_Write>
	...

80002c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80002c3c:	c0 08       	rjmp	80002c3c <_handle_DTLB_Protection_Read>
	...

80002c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002c40:	c0 08       	rjmp	80002c40 <_handle_DTLB_Protection_Write>
	...

80002c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002c44:	c0 08       	rjmp	80002c44 <_handle_DTLB_Modified>
	...

80002c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002c50:	c0 08       	rjmp	80002c50 <_handle_ITLB_Miss>
	...

80002c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002c60:	c0 08       	rjmp	80002c60 <_handle_DTLB_Miss_Read>
	...

80002c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002c70:	c0 08       	rjmp	80002c70 <_handle_DTLB_Miss_Write>
	...

80002d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002d00:	c0 08       	rjmp	80002d00 <_handle_Supervisor_Call>
80002d02:	d7 03       	nop

80002d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d04:	30 0c       	mov	r12,0
80002d06:	fe b0 fa a9 	rcall	80002258 <_get_interrupt_handler>
80002d0a:	58 0c       	cp.w	r12,0
80002d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d10:	d6 03       	rete

80002d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d12:	30 1c       	mov	r12,1
80002d14:	fe b0 fa a2 	rcall	80002258 <_get_interrupt_handler>
80002d18:	58 0c       	cp.w	r12,0
80002d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d1e:	d6 03       	rete

80002d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d20:	30 2c       	mov	r12,2
80002d22:	fe b0 fa 9b 	rcall	80002258 <_get_interrupt_handler>
80002d26:	58 0c       	cp.w	r12,0
80002d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d2c:	d6 03       	rete

80002d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d2e:	30 3c       	mov	r12,3
80002d30:	fe b0 fa 94 	rcall	80002258 <_get_interrupt_handler>
80002d34:	58 0c       	cp.w	r12,0
80002d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d3a:	d6 03       	rete
80002d3c:	d7 03       	nop
80002d3e:	d7 03       	nop
80002d40:	d7 03       	nop
80002d42:	d7 03       	nop
80002d44:	d7 03       	nop
80002d46:	d7 03       	nop
80002d48:	d7 03       	nop
80002d4a:	d7 03       	nop
80002d4c:	d7 03       	nop
80002d4e:	d7 03       	nop
80002d50:	d7 03       	nop
80002d52:	d7 03       	nop
80002d54:	d7 03       	nop
80002d56:	d7 03       	nop
80002d58:	d7 03       	nop
80002d5a:	d7 03       	nop
80002d5c:	d7 03       	nop
80002d5e:	d7 03       	nop
80002d60:	d7 03       	nop
80002d62:	d7 03       	nop
80002d64:	d7 03       	nop
80002d66:	d7 03       	nop
80002d68:	d7 03       	nop
80002d6a:	d7 03       	nop
80002d6c:	d7 03       	nop
80002d6e:	d7 03       	nop
80002d70:	d7 03       	nop
80002d72:	d7 03       	nop
80002d74:	d7 03       	nop
80002d76:	d7 03       	nop
80002d78:	d7 03       	nop
80002d7a:	d7 03       	nop
80002d7c:	d7 03       	nop
80002d7e:	d7 03       	nop
80002d80:	d7 03       	nop
80002d82:	d7 03       	nop
80002d84:	d7 03       	nop
80002d86:	d7 03       	nop
80002d88:	d7 03       	nop
80002d8a:	d7 03       	nop
80002d8c:	d7 03       	nop
80002d8e:	d7 03       	nop
80002d90:	d7 03       	nop
80002d92:	d7 03       	nop
80002d94:	d7 03       	nop
80002d96:	d7 03       	nop
80002d98:	d7 03       	nop
80002d9a:	d7 03       	nop
80002d9c:	d7 03       	nop
80002d9e:	d7 03       	nop
80002da0:	d7 03       	nop
80002da2:	d7 03       	nop
80002da4:	d7 03       	nop
80002da6:	d7 03       	nop
80002da8:	d7 03       	nop
80002daa:	d7 03       	nop
80002dac:	d7 03       	nop
80002dae:	d7 03       	nop
80002db0:	d7 03       	nop
80002db2:	d7 03       	nop
80002db4:	d7 03       	nop
80002db6:	d7 03       	nop
80002db8:	d7 03       	nop
80002dba:	d7 03       	nop
80002dbc:	d7 03       	nop
80002dbe:	d7 03       	nop
80002dc0:	d7 03       	nop
80002dc2:	d7 03       	nop
80002dc4:	d7 03       	nop
80002dc6:	d7 03       	nop
80002dc8:	d7 03       	nop
80002dca:	d7 03       	nop
80002dcc:	d7 03       	nop
80002dce:	d7 03       	nop
80002dd0:	d7 03       	nop
80002dd2:	d7 03       	nop
80002dd4:	d7 03       	nop
80002dd6:	d7 03       	nop
80002dd8:	d7 03       	nop
80002dda:	d7 03       	nop
80002ddc:	d7 03       	nop
80002dde:	d7 03       	nop
80002de0:	d7 03       	nop
80002de2:	d7 03       	nop
80002de4:	d7 03       	nop
80002de6:	d7 03       	nop
80002de8:	d7 03       	nop
80002dea:	d7 03       	nop
80002dec:	d7 03       	nop
80002dee:	d7 03       	nop
80002df0:	d7 03       	nop
80002df2:	d7 03       	nop
80002df4:	d7 03       	nop
80002df6:	d7 03       	nop
80002df8:	d7 03       	nop
80002dfa:	d7 03       	nop
80002dfc:	d7 03       	nop
80002dfe:	d7 03       	nop
