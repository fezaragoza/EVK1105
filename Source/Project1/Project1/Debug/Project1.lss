
Project1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000002b0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000a0  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000001  00000008  800026a0  00002c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  00000009  800026a1  00002c09  2**0
                  ALLOC
  8 .bss          000000f0  00000010  00000010  00000000  2**2
                  ALLOC
  9 .heap         0000ef00  00000100  00000100  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00002c09  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000228  00000000  00000000  00002c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000046c  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00001a22  00000000  00000000  000032d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000741  00000000  00000000  00004cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002285  00000000  00000000  00005437  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000408  00000000  00000000  000076bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00000b11  00000000  00000000  00007ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000076b  00000000  00000000  000085d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 003bbeac  00000000  00000000  00008d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 000001d8  00000000  00000000  003c4bf0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf de 48 	sub	pc,pc,-8632

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fe 4c 	sub	pc,pc,-436

Disassembly of section .text:

80002008 <apply_led_mask>:
80002008:	d4 01       	pushm	lr
8000200a:	18 6a       	and	r10,r12
	apply_led_mask(number, LED5_GPIO, LED5_MASK_D);
}

void apply_led_mask(uint8_t number, uint8_t pin, uint8_t mask)
{
	if (number & mask)
8000200c:	30 08       	mov	r8,0
8000200e:	f0 0a 18 00 	cp.b	r10,r8
80002012:	c0 50       	breq	8000201c <apply_led_mask+0x14>
		gpio_set_pin_low(pin); // Turn LED ON
80002014:	16 9c       	mov	r12,r11
80002016:	f0 1f 00 04 	mcall	80002024 <apply_led_mask+0x1c>
8000201a:	d8 02       	popm	pc
	else
		gpio_set_pin_high(pin); // Turn LED OFF
8000201c:	16 9c       	mov	r12,r11
8000201e:	f0 1f 00 03 	mcall	80002028 <apply_led_mask+0x20>
80002022:	d8 02       	popm	pc
80002024:	80 00       	ld.sh	r0,r0[0x0]
80002026:	21 6a       	sub	r10,22
80002028:	80 00       	ld.sh	r0,r0[0x0]
8000202a:	21 54       	sub	r4,21

8000202c <set_ledx_num_d>:
	apply_led_mask(number, LED1_GPIO, LED1_MASK_C);
	apply_led_mask(number, LED2_GPIO, LED2_MASK_C);
}

void set_ledx_num_d(uint8_t number)
{
8000202c:	eb cd 40 80 	pushm	r7,lr
80002030:	18 97       	mov	r7,r12
	apply_led_mask(number, LED0_GPIO, LED0_MASK_D);
80002032:	32 0a       	mov	r10,32
80002034:	33 bb       	mov	r11,59
80002036:	f0 1f 00 0f 	mcall	80002070 <set_ledx_num_d+0x44>
	apply_led_mask(number, LED1_GPIO, LED1_MASK_D);
8000203a:	31 0a       	mov	r10,16
8000203c:	33 cb       	mov	r11,60
8000203e:	0e 9c       	mov	r12,r7
80002040:	f0 1f 00 0c 	mcall	80002070 <set_ledx_num_d+0x44>
	apply_led_mask(number, LED2_GPIO, LED2_MASK_D);
80002044:	30 8a       	mov	r10,8
80002046:	30 5b       	mov	r11,5
80002048:	0e 9c       	mov	r12,r7
8000204a:	f0 1f 00 0a 	mcall	80002070 <set_ledx_num_d+0x44>
	apply_led_mask(number, LED3_GPIO, LED3_MASK_D);
8000204e:	30 4a       	mov	r10,4
80002050:	30 6b       	mov	r11,6
80002052:	0e 9c       	mov	r12,r7
80002054:	f0 1f 00 07 	mcall	80002070 <set_ledx_num_d+0x44>
	apply_led_mask(number, LED4_GPIO, LED4_MASK_D);
80002058:	30 2a       	mov	r10,2
8000205a:	33 eb       	mov	r11,62
8000205c:	0e 9c       	mov	r12,r7
8000205e:	f0 1f 00 05 	mcall	80002070 <set_ledx_num_d+0x44>
	apply_led_mask(number, LED5_GPIO, LED5_MASK_D);
80002062:	30 1a       	mov	r10,1
80002064:	33 fb       	mov	r11,63
80002066:	0e 9c       	mov	r12,r7
80002068:	f0 1f 00 02 	mcall	80002070 <set_ledx_num_d+0x44>
}
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	20 08       	sub	r8,0

80002074 <config_led_gpio>:

/* INCLUDES */
#include "conf_gpio.h"

void config_led_gpio(void)
{
80002074:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002076:	30 3b       	mov	r11,3
80002078:	33 bc       	mov	r12,59
8000207a:	f0 1f 00 08 	mcall	80002098 <config_led_gpio+0x24>
	gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000207e:	30 3b       	mov	r11,3
80002080:	33 cc       	mov	r12,60
80002082:	f0 1f 00 06 	mcall	80002098 <config_led_gpio+0x24>
	gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002086:	30 3b       	mov	r11,3
80002088:	30 5c       	mov	r12,5
8000208a:	f0 1f 00 04 	mcall	80002098 <config_led_gpio+0x24>
	gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000208e:	30 3b       	mov	r11,3
80002090:	30 6c       	mov	r12,6
80002092:	f0 1f 00 02 	mcall	80002098 <config_led_gpio+0x24>
}
80002096:	d8 02       	popm	pc
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 9c       	sub	r12,9

8000209c <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000209c:	f8 08 16 05 	lsr	r8,r12,0x5
800020a0:	a9 68       	lsl	r8,0x8
800020a2:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800020a6:	16 99       	mov	r9,r11
800020a8:	e2 19 00 04 	andl	r9,0x4,COH
800020ac:	c0 70       	breq	800020ba <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800020ae:	30 19       	mov	r9,1
800020b0:	f2 0c 09 49 	lsl	r9,r9,r12
800020b4:	f1 49 00 74 	st.w	r8[116],r9
800020b8:	c0 68       	rjmp	800020c4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800020ba:	30 19       	mov	r9,1
800020bc:	f2 0c 09 49 	lsl	r9,r9,r12
800020c0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800020c4:	16 99       	mov	r9,r11
800020c6:	e2 19 00 80 	andl	r9,0x80,COH
800020ca:	c2 40       	breq	80002112 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800020cc:	16 99       	mov	r9,r11
800020ce:	e2 19 01 80 	andl	r9,0x180,COH
800020d2:	c0 90       	breq	800020e4 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800020d4:	30 19       	mov	r9,1
800020d6:	f2 0c 09 49 	lsl	r9,r9,r12
800020da:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800020de:	f1 49 00 b8 	st.w	r8[184],r9
800020e2:	c1 88       	rjmp	80002112 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800020e4:	16 99       	mov	r9,r11
800020e6:	e2 19 02 80 	andl	r9,0x280,COH
800020ea:	c0 90       	breq	800020fc <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800020ec:	30 19       	mov	r9,1
800020ee:	f2 0c 09 49 	lsl	r9,r9,r12
800020f2:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800020f6:	f1 49 00 b8 	st.w	r8[184],r9
800020fa:	c0 c8       	rjmp	80002112 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
800020fc:	16 99       	mov	r9,r11
800020fe:	e2 19 03 80 	andl	r9,0x380,COH
80002102:	c0 80       	breq	80002112 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 49 	lsl	r9,r9,r12
8000210a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000210e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002112:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002116:	c1 50       	breq	80002140 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002118:	e2 1b 00 02 	andl	r11,0x2,COH
8000211c:	c0 70       	breq	8000212a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000211e:	30 19       	mov	r9,1
80002120:	f2 0c 09 49 	lsl	r9,r9,r12
80002124:	f1 49 00 54 	st.w	r8[84],r9
80002128:	c0 68       	rjmp	80002134 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000212a:	30 19       	mov	r9,1
8000212c:	f2 0c 09 49 	lsl	r9,r9,r12
80002130:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002134:	30 19       	mov	r9,1
80002136:	f2 0c 09 49 	lsl	r9,r9,r12
8000213a:	f1 49 00 44 	st.w	r8[68],r9
8000213e:	c0 68       	rjmp	8000214a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002140:	30 19       	mov	r9,1
80002142:	f2 0c 09 49 	lsl	r9,r9,r12
80002146:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002150:	91 1c       	st.w	r8[0x4],r12
}
80002152:	5e fc       	retal	r12

80002154 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002154:	f8 08 16 05 	lsr	r8,r12,0x5
80002158:	a9 68       	lsl	r8,0x8
8000215a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000215e:	30 19       	mov	r9,1
80002160:	f2 0c 09 4c 	lsl	r12,r9,r12
80002164:	f1 4c 00 54 	st.w	r8[84],r12
}
80002168:	5e fc       	retal	r12

8000216a <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000216a:	f8 08 16 05 	lsr	r8,r12,0x5
8000216e:	a9 68       	lsl	r8,0x8
80002170:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002174:	30 19       	mov	r9,1
80002176:	f2 0c 09 4c 	lsl	r12,r9,r12
8000217a:	f1 4c 00 58 	st.w	r8[88],r12
}
8000217e:	5e fc       	retal	r12

80002180 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002180:	fe 78 08 00 	mov	r8,-63488
80002184:	e0 69 00 83 	mov	r9,131
80002188:	f2 0c 01 0c 	sub	r12,r9,r12
8000218c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002190:	f2 ca ff c0 	sub	r10,r9,-64
80002194:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002198:	58 08       	cp.w	r8,0
8000219a:	c0 21       	brne	8000219e <_get_interrupt_handler+0x1e>
8000219c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
8000219e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800021a2:	48 5a       	lddpc	r10,800021b4 <_get_interrupt_handler+0x34>
800021a4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800021a8:	f0 08 11 1f 	rsub	r8,r8,31
800021ac:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021ae:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800021b2:	5e fc       	retal	r12
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	26 00       	sub	r0,96

800021b8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800021b8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800021bc:	fe c0 fd bc 	sub	r0,pc,-580

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800021c0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800021c4:	d5 53       	csrf	0x15
  cp      r0, r1
800021c6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800021c8:	31 01       	mov	r1,16
  lda.w   r2, _data_lma
800021ca:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800021cc:	c0 72       	brcc	800021da <idata_load_loop_end>
  st.d    r0++, r4
800021ce:	fe c2 fb 2e 	sub	r2,pc,-1234

800021d2 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800021d2:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800021d4:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800021d6:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021d8:	cf d3       	brcs	800021d2 <idata_load_loop>

800021da <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800021da:	31 00       	mov	r0,16
  mov     r2, 0
800021dc:	e0 61 01 00 	mov	r1,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800021e0:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021e2:	c0 62       	brcc	800021ee <udata_clear_loop_end>
  brlo    udata_clear_loop
800021e4:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800021e6:	30 03       	mov	r3,0

800021e8 <udata_clear_loop>:
800021e8:	a1 22       	st.d	r0++,r2
800021ea:	02 30       	cp.w	r0,r1
800021ec:	cf e3       	brcs	800021e8 <udata_clear_loop>

800021ee <udata_clear_loop_end>:
800021ee:	fe cf ff 42 	sub	pc,pc,-190
800021f2:	d7 03       	nop

800021f4 <exercise_D>:
800021f4:	eb cd 40 fc 	pushm	r2-r7,lr
800021f8:	20 1d       	sub	sp,4
800021fa:	30 3b       	mov	r11,3
800021fc:	33 ec       	mov	r12,62
800021fe:	f0 1f 00 27 	mcall	80002298 <exercise_D+0xa4>
80002202:	30 3b       	mov	r11,3
80002204:	33 fc       	mov	r12,63
80002206:	f0 1f 00 25 	mcall	80002298 <exercise_D+0xa4>
void exercise_D(void)
{
	// Configure LEDS and QT
	gpio_configure_pin(LED4_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	gpio_configure_pin(LED5_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	config_led_gpio();
8000220a:	f0 1f 00 25 	mcall	8000229c <exercise_D+0xa8>
	evk_led_t evkled_d;
	memset(&evkled_d, 0, sizeof(evkled_d));
8000220e:	30 08       	mov	r8,0
80002210:	ba b8       	st.b	sp[0x3],r8
	while (1)
	{
		static bool up_down = true;
		static uint8_t position = 0;
		
		if (up_down)
80002212:	4a 47       	lddpc	r7,800022a0 <exercise_D+0xac>
80002214:	10 96       	mov	r6,r8
		{
			// UP
			if (position < 5)
80002216:	4a 45       	lddpc	r5,800022a4 <exercise_D+0xb0>
80002218:	30 44       	mov	r4,4
			{
				evkled_d.ledx = (1 << ++position);
8000221a:	30 13       	mov	r3,1
				up_down = (position == 5) ? false : true;
8000221c:	30 52       	mov	r2,5
	while (1)
	{
		static bool up_down = true;
		static uint8_t position = 0;
		
		if (up_down)
8000221e:	0f 88       	ld.ub	r8,r7[0x0]
80002220:	ec 08 18 00 	cp.b	r8,r6
80002224:	c1 40       	breq	8000224c <exercise_D+0x58>
		{
			// UP
			if (position < 5)
80002226:	0b 88       	ld.ub	r8,r5[0x0]
80002228:	e8 08 18 00 	cp.b	r8,r4
8000222c:	e0 8b 00 0c 	brhi	80002244 <exercise_D+0x50>
			{
				evkled_d.ledx = (1 << ++position);
80002230:	2f f8       	sub	r8,-1
80002232:	5c 58       	castu.b	r8
80002234:	aa 88       	st.b	r5[0x0],r8
80002236:	e6 08 09 49 	lsl	r9,r3,r8
8000223a:	ba b9       	st.b	sp[0x3],r9
				up_down = (position == 5) ? false : true;
8000223c:	e4 08 18 00 	cp.b	r8,r2
80002240:	5f 18       	srne	r8
80002242:	ae 88       	st.b	r7[0x0],r8
			}
			set_ledx_num_d(evkled_d.ledx);
80002244:	1b bc       	ld.ub	r12,sp[0x3]
80002246:	f0 1f 00 19 	mcall	800022a8 <exercise_D+0xb4>
8000224a:	c1 18       	rjmp	8000226c <exercise_D+0x78>
		}
		else 
		{
			// DOWN
			if (position > 0)
8000224c:	0b 88       	ld.ub	r8,r5[0x0]
8000224e:	58 08       	cp.w	r8,0
80002250:	c0 b0       	breq	80002266 <exercise_D+0x72>
			{
				evkled_d.ledx = (1 << --position);
80002252:	20 18       	sub	r8,1
80002254:	5c 58       	castu.b	r8
80002256:	aa 88       	st.b	r5[0x0],r8
80002258:	e6 08 09 49 	lsl	r9,r3,r8
8000225c:	ba b9       	st.b	sp[0x3],r9
				up_down = (position == 0) ? true : false;
8000225e:	ec 08 18 00 	cp.b	r8,r6
80002262:	5f 08       	sreq	r8
80002264:	ae 88       	st.b	r7[0x0],r8
			}
			set_ledx_num_d(evkled_d.ledx);
80002266:	1b bc       	ld.ub	r12,sp[0x3]
80002268:	f0 1f 00 10 	mcall	800022a8 <exercise_D+0xb4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000226c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002270:	f0 ca d3 00 	sub	r10,r8,-11520
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002274:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002278:	14 38       	cp.w	r8,r10
8000227a:	e0 88 00 08 	brls	8000228a <exercise_D+0x96>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000227e:	12 38       	cp.w	r8,r9
80002280:	fe 98 ff fa 	brls	80002274 <exercise_D+0x80>
80002284:	12 3a       	cp.w	r10,r9
80002286:	cc c3       	brcs	8000221e <exercise_D+0x2a>
80002288:	cf 6b       	rjmp	80002274 <exercise_D+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000228a:	12 38       	cp.w	r8,r9
8000228c:	fe 9b ff c9 	brhi	8000221e <exercise_D+0x2a>
80002290:	12 3a       	cp.w	r10,r9
80002292:	cc 63       	brcs	8000221e <exercise_D+0x2a>
80002294:	cf 0b       	rjmp	80002274 <exercise_D+0x80>
80002296:	00 00       	add	r0,r0
80002298:	80 00       	ld.sh	r0,r0[0x0]
8000229a:	20 9c       	sub	r12,9
8000229c:	80 00       	ld.sh	r0,r0[0x0]
8000229e:	20 74       	sub	r4,7
800022a0:	00 00       	add	r0,r0
800022a2:	00 08       	add	r8,r0
800022a4:	00 00       	add	r0,r0
800022a6:	00 fc       	st.b	--r0,r12
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	20 2c       	sub	r12,2

800022ac <main>:
void exercise_B(void);
void exercise_C(void);
void exercise_D(void);

int main (void)
{
800022ac:	d4 01       	pushm	lr
	
	// Exercise C)
	//exercise_C();
	
	// Exercise D)
	exercise_D();
800022ae:	f0 1f 00 02 	mcall	800022b4 <main+0x8>
}
800022b2:	d8 0a       	popm	pc,r12=0
800022b4:	80 00       	ld.sh	r0,r0[0x0]
800022b6:	21 f4       	sub	r4,31

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	c3 de       	rcall	80002180 <_get_interrupt_handler>
80002508:	58 0c       	cp.w	r12,0
8000250a:	f8 0f 17 10 	movne	pc,r12
8000250e:	d6 03       	rete

80002510 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	c3 7e       	rcall	80002180 <_get_interrupt_handler>
80002514:	58 0c       	cp.w	r12,0
80002516:	f8 0f 17 10 	movne	pc,r12
8000251a:	d6 03       	rete

8000251c <_int2>:
8000251c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	c3 1e       	rcall	80002180 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	58 0c       	cp.w	r12,0
80002522:	f8 0f 17 10 	movne	pc,r12
80002526:	d6 03       	rete

80002528 <_int3>:
80002528:	30 3c       	mov	r12,3
8000252a:	c2 be       	rcall	80002180 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	f8 0f 17 10 	movne	pc,r12
80002532:	d6 03       	rete
80002534:	d7 03       	nop
80002536:	d7 03       	nop
80002538:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d7 03       	nop
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
