
Project1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000b80  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002c00  80002c00  00003000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000124  80002e00  80002e00  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002f24  80002f24  00003324  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000504  00000008  80002f28  00003408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  0000050c  8000342c  0000390c  2**0
                  ALLOC
  9 .bss          00000130  00000510  00000510  00000000  2**2
                  ALLOC
 10 .heap         0000e9c0  00000640  00000640  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000390c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000004a0  00000000  00000000  00003940  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000008eb  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   00007c19  00000000  00000000  000046cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000018b2  00000000  00000000  0000c2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004479  00000000  00000000  0000db96  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000890  00000000  00000000  00012010  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000180c  00000000  00000000  000128a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000015ac  00000000  00000000  000140ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 003bbd36  00000000  00000000  00015658  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000438  00000000  00000000  003d1390  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf de 04 	sub	pc,pc,-8700

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fe 08 	sub	pc,pc,-504

Disassembly of section .text:

80002008 <qt_get_activation>:
80002008:	58 1a       	cp.w	r10,1
8000200a:	c0 80       	breq	8000201a <qt_get_activation+0x12>
	bool activation = false;
	switch(edge)
	{
		default:
		case QT_PRESSED:
			if ((current == true) && (past == false))
8000200c:	58 0c       	cp.w	r12,0
8000200e:	c0 90       	breq	80002020 <qt_get_activation+0x18>
	}
	//}
	button->past_state = button->current_state;
}

bool qt_get_activation(bool current, bool past, bool edge)
80002010:	ec 1b 00 01 	eorl	r11,0x1
80002014:	f9 db c0 08 	bfextu	r12,r11,0x0,0x8
80002018:	5e fc       	retal	r12
			if ((current == true) && (past == false))
			activation = true;
			break;
		
		case QT_RELEASED:
			if ((current == false) && (past == true))
8000201a:	58 0c       	cp.w	r12,0
8000201c:	c0 21       	brne	80002020 <qt_get_activation+0x18>
8000201e:	5e fb       	retal	r11
80002020:	5e fd       	retal	0
80002022:	d7 03       	nop

80002024 <poll_qt_button>:
	
	return qt;
}

void poll_qt_button(button_t* button, bool edge)
{
80002024:	eb cd 40 e0 	pushm	r5-r7,lr
80002028:	18 97       	mov	r7,r12
8000202a:	16 95       	mov	r5,r11
	button->current_state = gpio_get_pin_value(button->pin);
8000202c:	19 8c       	ld.ub	r12,r12[0x0]
8000202e:	f0 1f 00 0b 	mcall	80002058 <poll_qt_button+0x34>
80002032:	18 96       	mov	r6,r12
80002034:	ae ac       	st.b	r7[0x2],r12
	//if (button->current_state == 1)
	//{
		////delay
	if (button->current_state == gpio_get_pin_value(button->pin))
80002036:	0f 8c       	ld.ub	r12,r7[0x0]
80002038:	f0 1f 00 08 	mcall	80002058 <poll_qt_button+0x34>
8000203c:	f8 06 18 00 	cp.b	r6,r12
80002040:	c0 71       	brne	8000204e <poll_qt_button+0x2a>
	{
		button->active = qt_get_activation(button->current_state,\
80002042:	0a 9a       	mov	r10,r5
80002044:	0f 9b       	ld.ub	r11,r7[0x1]
80002046:	0f ac       	ld.ub	r12,r7[0x2]
80002048:	f0 1f 00 05 	mcall	8000205c <poll_qt_button+0x38>
8000204c:	ae bc       	st.b	r7[0x3],r12
							button->past_state, edge);
	}
	//}
	button->past_state = button->current_state;
8000204e:	0f a8       	ld.ub	r8,r7[0x2]
80002050:	ae 98       	st.b	r7[0x1],r8
}
80002052:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002056:	00 00       	add	r0,r0
80002058:	80 00       	ld.sh	r0,r0[0x0]
8000205a:	21 80       	sub	r0,24
8000205c:	80 00       	ld.sh	r0,r0[0x0]
8000205e:	20 08       	sub	r8,0

80002060 <config_qt_gpio>:
#include "conf_qt.h"

/* QT_TOUCH_SENSOR UTILS */

qt_sensor_t* config_qt_gpio(void)
{
80002060:	eb cd 40 80 	pushm	r7,lr
	gpio_configure_pin(QT1081_TOUCH_SENSOR_ENTER, GPIO_DIR_INPUT);
80002064:	30 0b       	mov	r11,0
80002066:	33 ac       	mov	r12,58
80002068:	f0 1f 00 15 	mcall	800020bc <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_LEFT,  GPIO_DIR_INPUT);
8000206c:	30 0b       	mov	r11,0
8000206e:	33 9c       	mov	r12,57
80002070:	f0 1f 00 13 	mcall	800020bc <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_RIGHT, GPIO_DIR_INPUT);
80002074:	30 0b       	mov	r11,0
80002076:	33 8c       	mov	r12,56
80002078:	f0 1f 00 11 	mcall	800020bc <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_UP,	  GPIO_DIR_INPUT);
8000207c:	30 0b       	mov	r11,0
8000207e:	33 6c       	mov	r12,54
80002080:	f0 1f 00 0f 	mcall	800020bc <config_qt_gpio+0x5c>
	gpio_configure_pin(QT1081_TOUCH_SENSOR_DOWN,  GPIO_DIR_INPUT);
80002084:	30 0b       	mov	r11,0
80002086:	33 7c       	mov	r12,55
80002088:	f0 1f 00 0d 	mcall	800020bc <config_qt_gpio+0x5c>
	*	OVR - Output value reg. Flag: GPIO_INIT_HIGH or GPIO_INIT_LOW, sets/clears pin in ovr.
	*	GPER - Enable GPIO. set/clear gper.
	*	
	*	Flags can be found in gpio.h
	*/
	qt_sensor_t *qt = malloc(sizeof(*qt)); // Or sizeof(qt_sensor)
8000208c:	31 4c       	mov	r12,20
8000208e:	f0 1f 00 0d 	mcall	800020c0 <config_qt_gpio+0x60>
80002092:	18 97       	mov	r7,r12
	*qt = (qt_sensor_t){ 
80002094:	31 4a       	mov	r10,20
80002096:	30 0b       	mov	r11,0
80002098:	f0 1f 00 0b 	mcall	800020c4 <config_qt_gpio+0x64>
8000209c:	33 a8       	mov	r8,58
8000209e:	ae 88       	st.b	r7[0x0],r8
800020a0:	33 98       	mov	r8,57
800020a2:	ae c8       	st.b	r7[0x4],r8
800020a4:	33 88       	mov	r8,56
800020a6:	ef 68 00 08 	st.b	r7[8],r8
800020aa:	33 68       	mov	r8,54
800020ac:	ef 68 00 0c 	st.b	r7[12],r8
800020b0:	33 78       	mov	r8,55
800020b2:	ef 68 00 10 	st.b	r7[16],r8
						._up = INIT_QT_UP, ._down = INIT_QT_DOWN }
		}
	};
	
	return qt;
}
800020b6:	0e 9c       	mov	r12,r7
800020b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800020bc:	80 00       	ld.sh	r0,r0[0x0]
800020be:	20 c8       	sub	r8,12
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	24 dc       	sub	r12,77
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	29 08       	sub	r8,-112

800020c8 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020c8:	f8 08 16 05 	lsr	r8,r12,0x5
800020cc:	a9 68       	lsl	r8,0x8
800020ce:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800020d2:	16 99       	mov	r9,r11
800020d4:	e2 19 00 04 	andl	r9,0x4,COH
800020d8:	c0 70       	breq	800020e6 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800020da:	30 19       	mov	r9,1
800020dc:	f2 0c 09 49 	lsl	r9,r9,r12
800020e0:	f1 49 00 74 	st.w	r8[116],r9
800020e4:	c0 68       	rjmp	800020f0 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800020e6:	30 19       	mov	r9,1
800020e8:	f2 0c 09 49 	lsl	r9,r9,r12
800020ec:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800020f0:	16 99       	mov	r9,r11
800020f2:	e2 19 00 80 	andl	r9,0x80,COH
800020f6:	c2 40       	breq	8000213e <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800020f8:	16 99       	mov	r9,r11
800020fa:	e2 19 01 80 	andl	r9,0x180,COH
800020fe:	c0 90       	breq	80002110 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002100:	30 19       	mov	r9,1
80002102:	f2 0c 09 49 	lsl	r9,r9,r12
80002106:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000210a:	f1 49 00 b8 	st.w	r8[184],r9
8000210e:	c1 88       	rjmp	8000213e <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002110:	16 99       	mov	r9,r11
80002112:	e2 19 02 80 	andl	r9,0x280,COH
80002116:	c0 90       	breq	80002128 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002118:	30 19       	mov	r9,1
8000211a:	f2 0c 09 49 	lsl	r9,r9,r12
8000211e:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002122:	f1 49 00 b8 	st.w	r8[184],r9
80002126:	c0 c8       	rjmp	8000213e <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002128:	16 99       	mov	r9,r11
8000212a:	e2 19 03 80 	andl	r9,0x380,COH
8000212e:	c0 80       	breq	8000213e <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002130:	30 19       	mov	r9,1
80002132:	f2 0c 09 49 	lsl	r9,r9,r12
80002136:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000213a:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000213e:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002142:	c1 50       	breq	8000216c <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002144:	e2 1b 00 02 	andl	r11,0x2,COH
80002148:	c0 70       	breq	80002156 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	f1 49 00 54 	st.w	r8[84],r9
80002154:	c0 68       	rjmp	80002160 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002156:	30 19       	mov	r9,1
80002158:	f2 0c 09 49 	lsl	r9,r9,r12
8000215c:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002160:	30 19       	mov	r9,1
80002162:	f2 0c 09 49 	lsl	r9,r9,r12
80002166:	f1 49 00 44 	st.w	r8[68],r9
8000216a:	c0 68       	rjmp	80002176 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000216c:	30 19       	mov	r9,1
8000216e:	f2 0c 09 49 	lsl	r9,r9,r12
80002172:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002176:	30 19       	mov	r9,1
80002178:	f2 0c 09 4c 	lsl	r12,r9,r12
8000217c:	91 1c       	st.w	r8[0x4],r12
}
8000217e:	5e fc       	retal	r12

80002180 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002180:	f8 08 16 05 	lsr	r8,r12,0x5
80002184:	a9 68       	lsl	r8,0x8
80002186:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000218a:	71 88       	ld.w	r8,r8[0x60]
8000218c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002190:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002194:	5e fc       	retal	r12

80002196 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002196:	f8 08 16 05 	lsr	r8,r12,0x5
8000219a:	a9 68       	lsl	r8,0x8
8000219c:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800021a0:	30 19       	mov	r9,1
800021a2:	f2 0c 09 4c 	lsl	r12,r9,r12
800021a6:	f1 4c 00 54 	st.w	r8[84],r12
}
800021aa:	5e fc       	retal	r12

800021ac <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021ac:	f8 08 16 05 	lsr	r8,r12,0x5
800021b0:	a9 68       	lsl	r8,0x8
800021b2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800021b6:	30 19       	mov	r9,1
800021b8:	f2 0c 09 4c 	lsl	r12,r9,r12
800021bc:	f1 4c 00 58 	st.w	r8[88],r12
}
800021c0:	5e fc       	retal	r12
800021c2:	d7 03       	nop

800021c4 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800021c4:	fe 78 08 00 	mov	r8,-63488
800021c8:	e0 69 00 83 	mov	r9,131
800021cc:	f2 0c 01 0c 	sub	r12,r9,r12
800021d0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800021d4:	f2 ca ff c0 	sub	r10,r9,-64
800021d8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021dc:	58 08       	cp.w	r8,0
800021de:	c0 21       	brne	800021e2 <_get_interrupt_handler+0x1e>
800021e0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
800021e2:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800021e6:	48 5a       	lddpc	r10,800021f8 <_get_interrupt_handler+0x34>
800021e8:	f4 09 00 39 	add	r9,r10,r9<<0x3
800021ec:	f0 08 11 1f 	rsub	r8,r8,31
800021f0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021f2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800021f6:	5e fc       	retal	r12
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	2e 00       	sub	r0,-32

800021fc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800021fc:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002200:	fe c0 f6 00 	sub	r0,pc,-2560

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002204:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002208:	d5 53       	csrf	0x15
  cp      r0, r1
8000220a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000220c:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002210:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002212:	c0 72       	brcc	80002220 <idata_load_loop_end>
  cp      r0, r1
80002214:	fe c2 f2 ec 	sub	r2,pc,-3348

80002218 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002218:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000221a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000221c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000221e:	cf d3       	brcs	80002218 <idata_load_loop>

80002220 <idata_load_loop_end>:
  mov     r2, 0
80002220:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002224:	e0 61 06 40 	mov	r1,1600
  cp      r0, r1
  brlo    udata_clear_loop
80002228:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000222a:	c0 62       	brcc	80002236 <udata_clear_loop_end>
8000222c:	30 02       	mov	r2,0
8000222e:	30 03       	mov	r3,0

80002230 <udata_clear_loop>:
80002230:	a1 22       	st.d	r0++,r2
80002232:	02 30       	cp.w	r0,r1
80002234:	cf e3       	brcs	80002230 <udata_clear_loop>

80002236 <udata_clear_loop_end>:
80002236:	fe cf fe ce 	sub	pc,pc,-306
8000223a:	d7 03       	nop

8000223c <set_ledx_num>:
	gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
	gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
}

void set_ledx_num(uint8_t led)
{
8000223c:	d4 01       	pushm	lr
	switch (led)
8000223e:	58 7c       	cp.w	r12,7
80002240:	e0 8b 00 6d 	brhi	8000231a <set_ledx_num+0xde>
80002244:	4b c8       	lddpc	r8,80002334 <set_ledx_num+0xf8>
80002246:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
	{
	case 0: // 0b0000
		gpio_set_pin_high(LED0_GPIO);
8000224a:	33 bc       	mov	r12,59
8000224c:	f0 1f 00 3b 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED1_GPIO);
80002250:	33 cc       	mov	r12,60
80002252:	f0 1f 00 3a 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED2_GPIO);
80002256:	30 5c       	mov	r12,5
80002258:	f0 1f 00 38 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED3_GPIO);
8000225c:	30 6c       	mov	r12,6
8000225e:	f0 1f 00 37 	mcall	80002338 <set_ledx_num+0xfc>
		break;
80002262:	d8 02       	popm	pc
	case 1: // 0b0001
		gpio_set_pin_high(LED0_GPIO);
80002264:	33 bc       	mov	r12,59
80002266:	f0 1f 00 35 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED1_GPIO);
8000226a:	33 cc       	mov	r12,60
8000226c:	f0 1f 00 33 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED2_GPIO);
80002270:	30 5c       	mov	r12,5
80002272:	f0 1f 00 32 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED3_GPIO);
80002276:	30 6c       	mov	r12,6
80002278:	f0 1f 00 31 	mcall	8000233c <set_ledx_num+0x100>
		break;
8000227c:	d8 02       	popm	pc
	case 2: // 0b0010
		gpio_set_pin_high(LED0_GPIO);
8000227e:	33 bc       	mov	r12,59
80002280:	f0 1f 00 2e 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED1_GPIO);
80002284:	33 cc       	mov	r12,60
80002286:	f0 1f 00 2d 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED2_GPIO);
8000228a:	30 5c       	mov	r12,5
8000228c:	f0 1f 00 2c 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_high(LED3_GPIO);
80002290:	30 6c       	mov	r12,6
80002292:	f0 1f 00 2a 	mcall	80002338 <set_ledx_num+0xfc>
		break;
80002296:	d8 02       	popm	pc
	case 3: // 0b0011
		gpio_set_pin_high(LED0_GPIO);
80002298:	33 bc       	mov	r12,59
8000229a:	f0 1f 00 28 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED1_GPIO);
8000229e:	33 cc       	mov	r12,60
800022a0:	f0 1f 00 26 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED2_GPIO);
800022a4:	30 5c       	mov	r12,5
800022a6:	f0 1f 00 26 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED3_GPIO);
800022aa:	30 6c       	mov	r12,6
800022ac:	f0 1f 00 24 	mcall	8000233c <set_ledx_num+0x100>
		break;
800022b0:	d8 02       	popm	pc
	case 4: // 0b0100
		gpio_set_pin_high(LED0_GPIO);
800022b2:	33 bc       	mov	r12,59
800022b4:	f0 1f 00 21 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED1_GPIO);
800022b8:	33 cc       	mov	r12,60
800022ba:	f0 1f 00 21 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_high(LED2_GPIO);
800022be:	30 5c       	mov	r12,5
800022c0:	f0 1f 00 1e 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_high(LED3_GPIO);
800022c4:	30 6c       	mov	r12,6
800022c6:	f0 1f 00 1d 	mcall	80002338 <set_ledx_num+0xfc>
		break;
800022ca:	d8 02       	popm	pc
	case 5: // 0b0101
		gpio_set_pin_high(LED0_GPIO);
800022cc:	33 bc       	mov	r12,59
800022ce:	f0 1f 00 1b 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED1_GPIO);
800022d2:	33 cc       	mov	r12,60
800022d4:	f0 1f 00 1a 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_high(LED2_GPIO);
800022d8:	30 5c       	mov	r12,5
800022da:	f0 1f 00 18 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED3_GPIO);
800022de:	30 6c       	mov	r12,6
800022e0:	f0 1f 00 17 	mcall	8000233c <set_ledx_num+0x100>
		break;
800022e4:	d8 02       	popm	pc
	case 6: // 0b0110
		gpio_set_pin_high(LED0_GPIO);
800022e6:	33 bc       	mov	r12,59
800022e8:	f0 1f 00 14 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED1_GPIO);
800022ec:	33 cc       	mov	r12,60
800022ee:	f0 1f 00 14 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED2_GPIO);
800022f2:	30 5c       	mov	r12,5
800022f4:	f0 1f 00 12 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_high(LED3_GPIO);
800022f8:	30 6c       	mov	r12,6
800022fa:	f0 1f 00 10 	mcall	80002338 <set_ledx_num+0xfc>
		break;
800022fe:	d8 02       	popm	pc
	case 7: // 0b0111
		gpio_set_pin_high(LED0_GPIO);
80002300:	33 bc       	mov	r12,59
80002302:	f0 1f 00 0e 	mcall	80002338 <set_ledx_num+0xfc>
		gpio_set_pin_low(LED1_GPIO);
80002306:	33 cc       	mov	r12,60
80002308:	f0 1f 00 0d 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED2_GPIO);
8000230c:	30 5c       	mov	r12,5
8000230e:	f0 1f 00 0c 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED3_GPIO);
80002312:	30 6c       	mov	r12,6
80002314:	f0 1f 00 0a 	mcall	8000233c <set_ledx_num+0x100>
		break;
80002318:	d8 02       	popm	pc
	default:
		gpio_set_pin_low(LED0_GPIO);
8000231a:	33 bc       	mov	r12,59
8000231c:	f0 1f 00 08 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED1_GPIO);
80002320:	33 cc       	mov	r12,60
80002322:	f0 1f 00 07 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED2_GPIO);
80002326:	30 5c       	mov	r12,5
80002328:	f0 1f 00 05 	mcall	8000233c <set_ledx_num+0x100>
		gpio_set_pin_low(LED3_GPIO);
8000232c:	30 6c       	mov	r12,6
8000232e:	f0 1f 00 04 	mcall	8000233c <set_ledx_num+0x100>
80002332:	d8 02       	popm	pc
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	2e a0       	sub	r0,-22
80002338:	80 00       	ld.sh	r0,r0[0x0]
8000233a:	21 96       	sub	r6,25
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 ac       	sub	r12,26

80002340 <config_led_gpio>:

void config_led_gpio(void);
void set_ledx_num(uint8_t led);

void config_led_gpio(void)
{
80002340:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002342:	30 3b       	mov	r11,3
80002344:	33 bc       	mov	r12,59
80002346:	f0 1f 00 08 	mcall	80002364 <config_led_gpio+0x24>
	gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000234a:	30 3b       	mov	r11,3
8000234c:	33 cc       	mov	r12,60
8000234e:	f0 1f 00 06 	mcall	80002364 <config_led_gpio+0x24>
	gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002352:	30 3b       	mov	r11,3
80002354:	30 5c       	mov	r12,5
80002356:	f0 1f 00 04 	mcall	80002364 <config_led_gpio+0x24>
	gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000235a:	30 3b       	mov	r11,3
8000235c:	30 6c       	mov	r12,6
8000235e:	f0 1f 00 02 	mcall	80002364 <config_led_gpio+0x24>
}
80002362:	d8 02       	popm	pc
80002364:	80 00       	ld.sh	r0,r0[0x0]
80002366:	20 c8       	sub	r8,12

80002368 <main>:
	ENTER_NUM = 0,
	OR_AND
} state_machine_t;

int main (void)
{
80002368:	d4 31       	pushm	r0-r7,lr
8000236a:	20 5d       	sub	sp,20
	
	// Exercise A)
	uint8_t count = 0, position = 0;
	
	// Configure LEDS and QT
	config_led_gpio();
8000236c:	f0 1f 00 57 	mcall	800024c8 <main+0x160>
	qt_sensor_t *qt = config_qt_gpio();
80002370:	f0 1f 00 57 	mcall	800024cc <main+0x164>
80002374:	18 96       	mov	r6,r12
	
	evk_led_t evkl[NUMBER];
	memset(&evkl, 0, sizeof(evkl));
80002376:	30 08       	mov	r8,0
80002378:	fb 58 00 10 	st.h	sp[16],r8
	{
		static uint8_t num = 0; // Cannot have var declaration in the middle of cases. To workaround, put stuff inside case in a new scope {}
		switch(state)
		{
			case ENTER_NUM:
				poll_qt_button(&qt->button_s._left, QT_PRESSED);
8000237c:	f8 ca ff fc 	sub	r10,r12,-4
80002380:	50 3a       	stdsp	sp[0xc],r10
				poll_qt_button(&qt->button_s._right, QT_PRESSED);
80002382:	f8 c9 ff f8 	sub	r9,r12,-8
80002386:	50 29       	stdsp	sp[0x8],r9
				poll_qt_button(&qt->button_s._enter, QT_PRESSED);
80002388:	18 91       	mov	r1,r12
						}
					}
				}
				break;
			case OR_AND:
				poll_qt_button(&qt->button_s._up, QT_PRESSED);
8000238a:	f8 c8 ff f4 	sub	r8,r12,-12
8000238e:	50 18       	stdsp	sp[0x4],r8
				poll_qt_button(&qt->button_s._down, QT_PRESSED);
80002390:	f8 ca ff f0 	sub	r10,r12,-16
80002394:	50 0a       	stdsp	sp[0x0],r10
80002396:	30 04       	mov	r4,0
80002398:	08 93       	mov	r3,r4
8000239a:	08 90       	mov	r0,r4
						}
					}
				}
				break;
			case OR_AND:
				poll_qt_button(&qt->button_s._up, QT_PRESSED);
8000239c:	08 95       	mov	r5,r4
				poll_qt_button(&qt->button_s._down, QT_PRESSED);
				poll_qt_button(&qt->button_s._enter, QT_PRESSED);
				if (qt->button_s._down.active)
8000239e:	30 07       	mov	r7,0
				
				if (qt->button_s._enter.active)
				{
					// LED routine
					state = ENTER_NUM;
					num = 0;
800023a0:	4c c2       	lddpc	r2,800024d0 <main+0x168>
	
	// Poll
	while (1)
	{
		static uint8_t num = 0; // Cannot have var declaration in the middle of cases. To workaround, put stuff inside case in a new scope {}
		switch(state)
800023a2:	58 04       	cp.w	r4,0
800023a4:	c0 40       	breq	800023ac <main+0x44>
800023a6:	58 14       	cp.w	r4,1
800023a8:	cf d1       	brne	800023a2 <main+0x3a>
800023aa:	c5 e8       	rjmp	80002466 <main+0xfe>
		{
			case ENTER_NUM:
				poll_qt_button(&qt->button_s._left, QT_PRESSED);
800023ac:	0a 9b       	mov	r11,r5
800023ae:	40 3c       	lddsp	r12,sp[0xc]
800023b0:	f0 1f 00 49 	mcall	800024d4 <main+0x16c>
				poll_qt_button(&qt->button_s._right, QT_PRESSED);
800023b4:	0a 9b       	mov	r11,r5
800023b6:	40 2c       	lddsp	r12,sp[0x8]
800023b8:	f0 1f 00 47 	mcall	800024d4 <main+0x16c>
				poll_qt_button(&qt->button_s._enter, QT_PRESSED);
800023bc:	0a 9b       	mov	r11,r5
800023be:	02 9c       	mov	r12,r1
800023c0:	f0 1f 00 45 	mcall	800024d4 <main+0x16c>
				if (qt->button_s._left.active)
800023c4:	0d f8       	ld.ub	r8,r6[0x7]
800023c6:	ee 08 18 00 	cp.b	r8,r7
800023ca:	c1 80       	breq	800023fa <main+0x92>
				{
					if (position < 4)
800023cc:	30 39       	mov	r9,3
800023ce:	f2 03 18 00 	cp.b	r3,r9
800023d2:	e0 8b 00 2e 	brhi	8000242e <main+0xc6>
					{
						position++;
800023d6:	2f f3       	sub	r3,-1
800023d8:	5c 53       	castu.b	r3
						num = evkl[count].ledx;
						num |= 1 << (position - 1);
800023da:	e6 cc 00 01 	sub	r12,r3,1
800023de:	fa c8 ff ec 	sub	r8,sp,-20
800023e2:	00 08       	add	r8,r0
800023e4:	30 1a       	mov	r10,1
800023e6:	f4 0c 09 4c 	lsl	r12,r10,r12
800023ea:	f1 38 ff fc 	ld.ub	r8,r8[-4]
800023ee:	10 4c       	or	r12,r8
800023f0:	5c 5c       	castu.b	r12
800023f2:	a4 8c       	st.b	r2[0x0],r12
						// Update LEDs
						set_ledx_num(num);
800023f4:	f0 1f 00 39 	mcall	800024d8 <main+0x170>
800023f8:	c1 b8       	rjmp	8000242e <main+0xc6>
					}
					
				}
				else if (qt->button_s._right.active)
800023fa:	ed 38 00 0b 	ld.ub	r8,r6[11]
800023fe:	ee 08 18 00 	cp.b	r8,r7
80002402:	c1 60       	breq	8000242e <main+0xc6>
				{
					num = evkl[count].ledx;
80002404:	fa c8 ff ec 	sub	r8,sp,-20
80002408:	00 08       	add	r8,r0
8000240a:	f1 38 ff fc 	ld.ub	r8,r8[-4]
8000240e:	a4 88       	st.b	r2[0x0],r8

					if (position > 0)
80002410:	58 03       	cp.w	r3,0
80002412:	c0 b0       	breq	80002428 <main+0xc0>
					{
						--position;
80002414:	20 13       	sub	r3,1
80002416:	5c 53       	castu.b	r3
						if ((position - 1) >= 0)
80002418:	e6 c9 00 01 	sub	r9,r3,1
8000241c:	c0 66       	brmi	80002428 <main+0xc0>
							num |= 1 << (position - 1);	
8000241e:	30 1a       	mov	r10,1
80002420:	f4 09 09 49 	lsl	r9,r10,r9
80002424:	12 48       	or	r8,r9
80002426:	a4 88       	st.b	r2[0x0],r8
					//{
					//num = evkl[count].ledx;
					//}
				
					// Update LEDs
					set_ledx_num(num);
80002428:	05 8c       	ld.ub	r12,r2[0x0]
8000242a:	f0 1f 00 2c 	mcall	800024d8 <main+0x170>
				}
			
				if (qt->button_s._enter.active)
8000242e:	0d b8       	ld.ub	r8,r6[0x3]
80002430:	ee 08 18 00 	cp.b	r8,r7
80002434:	cb 70       	breq	800023a2 <main+0x3a>
				{
					if (position > 0)
80002436:	58 03       	cp.w	r3,0
80002438:	c0 b0       	breq	8000244e <main+0xe6>
					{
						// Entered a number, store it.
						evkl[count].ledx = num;
8000243a:	05 8c       	ld.ub	r12,r2[0x0]
8000243c:	fa c8 ff ec 	sub	r8,sp,-20
80002440:	00 08       	add	r8,r0
80002442:	f1 6c ff fc 	st.b	r8[-4],r12
						// Reset position to 0
						position = 0;
						// Update LEDs
						set_ledx_num(evkl[count].ledx);
80002446:	f0 1f 00 25 	mcall	800024d8 <main+0x170>
8000244a:	0a 93       	mov	r3,r5
8000244c:	ca bb       	rjmp	800023a2 <main+0x3a>
					}
					else
					{
						// Ready for the current number
						num = 0;
8000244e:	a4 87       	st.b	r2[0x0],r7
						position = 0;
						//Update LEDS
						set_ledx_num(num);
80002450:	0a 9c       	mov	r12,r5
80002452:	f0 1f 00 22 	mcall	800024d8 <main+0x170>
						if (++count == NUMBER)
80002456:	2f f0       	sub	r0,-1
80002458:	5c 50       	castu.b	r0
					}
				}
				break;
			case OR_AND:
				poll_qt_button(&qt->button_s._up, QT_PRESSED);
				poll_qt_button(&qt->button_s._down, QT_PRESSED);
8000245a:	30 29       	mov	r9,2
8000245c:	e0 09 18 00 	cp.b	r9,r0
80002460:	f9 b4 00 01 	moveq	r4,1
80002464:	c9 fb       	rjmp	800023a2 <main+0x3a>
						}
					}
				}
				break;
			case OR_AND:
				poll_qt_button(&qt->button_s._up, QT_PRESSED);
80002466:	0a 9b       	mov	r11,r5
80002468:	40 1c       	lddsp	r12,sp[0x4]
8000246a:	f0 1f 00 1b 	mcall	800024d4 <main+0x16c>
				poll_qt_button(&qt->button_s._down, QT_PRESSED);
8000246e:	0a 9b       	mov	r11,r5
80002470:	40 0c       	lddsp	r12,sp[0x0]
80002472:	f0 1f 00 19 	mcall	800024d4 <main+0x16c>
				poll_qt_button(&qt->button_s._enter, QT_PRESSED);
80002476:	0a 9b       	mov	r11,r5
80002478:	02 9c       	mov	r12,r1
8000247a:	f0 1f 00 17 	mcall	800024d4 <main+0x16c>
				if (qt->button_s._down.active)
8000247e:	ed 38 00 13 	ld.ub	r8,r6[19]
80002482:	ee 08 18 00 	cp.b	r8,r7
80002486:	c0 b0       	breq	8000249c <main+0x134>
				{
					num = evkl[0].ledx | evkl[1].ledx;
80002488:	fb 38 00 10 	ld.ub	r8,sp[16]
8000248c:	fb 3c 00 11 	ld.ub	r12,sp[17]
80002490:	10 4c       	or	r12,r8
80002492:	5c 5c       	castu.b	r12
80002494:	a4 8c       	st.b	r2[0x0],r12
					set_ledx_num(num);
80002496:	f0 1f 00 11 	mcall	800024d8 <main+0x170>
8000249a:	c0 e8       	rjmp	800024b6 <main+0x14e>
				}
				else if (qt->button_s._up.active)
8000249c:	ed 38 00 0f 	ld.ub	r8,r6[15]
800024a0:	ee 08 18 00 	cp.b	r8,r7
800024a4:	c0 90       	breq	800024b6 <main+0x14e>
				{
					num = evkl[0].ledx & evkl[1].ledx;
800024a6:	fb 3c 00 11 	ld.ub	r12,sp[17]
800024aa:	fb 38 00 10 	ld.ub	r8,sp[16]
800024ae:	10 6c       	and	r12,r8
800024b0:	a4 8c       	st.b	r2[0x0],r12
					set_ledx_num(num);
800024b2:	f0 1f 00 0a 	mcall	800024d8 <main+0x170>
				}
				
				if (qt->button_s._enter.active)
800024b6:	0d b8       	ld.ub	r8,r6[0x3]
800024b8:	ee 08 18 00 	cp.b	r8,r7
800024bc:	fe 90 ff 73 	breq	800023a2 <main+0x3a>
				{
					// LED routine
					state = ENTER_NUM;
					num = 0;
800024c0:	a4 87       	st.b	r2[0x0],r7
800024c2:	0a 94       	mov	r4,r5
800024c4:	c6 fb       	rjmp	800023a2 <main+0x3a>
800024c6:	00 00       	add	r0,r0
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	23 40       	sub	r0,52
800024cc:	80 00       	ld.sh	r0,r0[0x0]
800024ce:	20 60       	sub	r0,6
800024d0:	00 00       	add	r0,r0
800024d2:	05 fc       	ld.ub	r12,r2[0x7]
800024d4:	80 00       	ld.sh	r0,r0[0x0]
800024d6:	20 24       	sub	r4,2
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	22 3c       	sub	r12,35

800024dc <malloc>:
800024dc:	d4 01       	pushm	lr
800024de:	e0 68 05 08 	mov	r8,1288
800024e2:	18 9b       	mov	r11,r12
800024e4:	70 0c       	ld.w	r12,r8[0x0]
800024e6:	c0 3c       	rcall	800024ec <_malloc_r>
800024e8:	d8 02       	popm	pc
800024ea:	d7 03       	nop

800024ec <_malloc_r>:
800024ec:	d4 31       	pushm	r0-r7,lr
800024ee:	f6 c8 ff f5 	sub	r8,r11,-11
800024f2:	18 95       	mov	r5,r12
800024f4:	10 97       	mov	r7,r8
800024f6:	e0 17 ff f8 	andl	r7,0xfff8
800024fa:	59 68       	cp.w	r8,22
800024fc:	f9 b7 08 10 	movls	r7,16
80002500:	16 37       	cp.w	r7,r11
80002502:	5f 38       	srlo	r8
80002504:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80002508:	c0 50       	breq	80002512 <_malloc_r+0x26>
8000250a:	30 c8       	mov	r8,12
8000250c:	99 38       	st.w	r12[0xc],r8
8000250e:	e0 8f 01 ee 	bral	800028ea <_malloc_r+0x3fe>
80002512:	e0 a0 02 02 	rcall	80002916 <__malloc_lock>
80002516:	e0 47 01 f7 	cp.w	r7,503
8000251a:	e0 8b 00 1c 	brhi	80002552 <_malloc_r+0x66>
8000251e:	ee 03 16 03 	lsr	r3,r7,0x3
80002522:	30 88       	mov	r8,8
80002524:	f0 03 00 38 	add	r8,r8,r3<<0x3
80002528:	70 36       	ld.w	r6,r8[0xc]
8000252a:	10 36       	cp.w	r6,r8
8000252c:	c0 61       	brne	80002538 <_malloc_r+0x4c>
8000252e:	ec c8 ff f8 	sub	r8,r6,-8
80002532:	70 36       	ld.w	r6,r8[0xc]
80002534:	10 36       	cp.w	r6,r8
80002536:	c0 c0       	breq	8000254e <_malloc_r+0x62>
80002538:	6c 18       	ld.w	r8,r6[0x4]
8000253a:	e0 18 ff fc 	andl	r8,0xfffc
8000253e:	6c 3a       	ld.w	r10,r6[0xc]
80002540:	ec 08 00 09 	add	r9,r6,r8
80002544:	0a 9c       	mov	r12,r5
80002546:	6c 28       	ld.w	r8,r6[0x8]
80002548:	95 28       	st.w	r10[0x8],r8
8000254a:	91 3a       	st.w	r8[0xc],r10
8000254c:	c4 68       	rjmp	800025d8 <_malloc_r+0xec>
8000254e:	2f e3       	sub	r3,-2
80002550:	c4 c8       	rjmp	800025e8 <_malloc_r+0xfc>
80002552:	ee 03 16 09 	lsr	r3,r7,0x9
80002556:	c0 41       	brne	8000255e <_malloc_r+0x72>
80002558:	ee 03 16 03 	lsr	r3,r7,0x3
8000255c:	c2 68       	rjmp	800025a8 <_malloc_r+0xbc>
8000255e:	58 43       	cp.w	r3,4
80002560:	e0 8b 00 06 	brhi	8000256c <_malloc_r+0x80>
80002564:	ee 03 16 06 	lsr	r3,r7,0x6
80002568:	2c 83       	sub	r3,-56
8000256a:	c1 f8       	rjmp	800025a8 <_malloc_r+0xbc>
8000256c:	59 43       	cp.w	r3,20
8000256e:	e0 8b 00 04 	brhi	80002576 <_malloc_r+0x8a>
80002572:	2a 53       	sub	r3,-91
80002574:	c1 a8       	rjmp	800025a8 <_malloc_r+0xbc>
80002576:	e0 43 00 54 	cp.w	r3,84
8000257a:	e0 8b 00 06 	brhi	80002586 <_malloc_r+0x9a>
8000257e:	ee 03 16 0c 	lsr	r3,r7,0xc
80002582:	29 23       	sub	r3,-110
80002584:	c1 28       	rjmp	800025a8 <_malloc_r+0xbc>
80002586:	e0 43 01 54 	cp.w	r3,340
8000258a:	e0 8b 00 06 	brhi	80002596 <_malloc_r+0xaa>
8000258e:	ee 03 16 0f 	lsr	r3,r7,0xf
80002592:	28 93       	sub	r3,-119
80002594:	c0 a8       	rjmp	800025a8 <_malloc_r+0xbc>
80002596:	e0 43 05 54 	cp.w	r3,1364
8000259a:	e0 88 00 04 	brls	800025a2 <_malloc_r+0xb6>
8000259e:	37 e3       	mov	r3,126
800025a0:	c0 48       	rjmp	800025a8 <_malloc_r+0xbc>
800025a2:	ee 03 16 12 	lsr	r3,r7,0x12
800025a6:	28 43       	sub	r3,-124
800025a8:	30 8a       	mov	r10,8
800025aa:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800025ae:	74 36       	ld.w	r6,r10[0xc]
800025b0:	c1 98       	rjmp	800025e2 <_malloc_r+0xf6>
800025b2:	6c 19       	ld.w	r9,r6[0x4]
800025b4:	e0 19 ff fc 	andl	r9,0xfffc
800025b8:	f2 07 01 0b 	sub	r11,r9,r7
800025bc:	58 fb       	cp.w	r11,15
800025be:	e0 8a 00 04 	brle	800025c6 <_malloc_r+0xda>
800025c2:	20 13       	sub	r3,1
800025c4:	c1 18       	rjmp	800025e6 <_malloc_r+0xfa>
800025c6:	6c 38       	ld.w	r8,r6[0xc]
800025c8:	58 0b       	cp.w	r11,0
800025ca:	c0 b5       	brlt	800025e0 <_malloc_r+0xf4>
800025cc:	6c 2a       	ld.w	r10,r6[0x8]
800025ce:	ec 09 00 09 	add	r9,r6,r9
800025d2:	0a 9c       	mov	r12,r5
800025d4:	91 2a       	st.w	r8[0x8],r10
800025d6:	95 38       	st.w	r10[0xc],r8
800025d8:	72 18       	ld.w	r8,r9[0x4]
800025da:	a1 a8       	sbr	r8,0x0
800025dc:	93 18       	st.w	r9[0x4],r8
800025de:	cb 88       	rjmp	8000274e <_malloc_r+0x262>
800025e0:	10 96       	mov	r6,r8
800025e2:	14 36       	cp.w	r6,r10
800025e4:	ce 71       	brne	800025b2 <_malloc_r+0xc6>
800025e6:	2f f3       	sub	r3,-1
800025e8:	30 8a       	mov	r10,8
800025ea:	f4 cc ff f8 	sub	r12,r10,-8
800025ee:	78 26       	ld.w	r6,r12[0x8]
800025f0:	18 36       	cp.w	r6,r12
800025f2:	c6 a0       	breq	800026c6 <_malloc_r+0x1da>
800025f4:	6c 19       	ld.w	r9,r6[0x4]
800025f6:	e0 19 ff fc 	andl	r9,0xfffc
800025fa:	f2 07 01 08 	sub	r8,r9,r7
800025fe:	58 f8       	cp.w	r8,15
80002600:	e0 89 00 8c 	brgt	80002718 <_malloc_r+0x22c>
80002604:	99 3c       	st.w	r12[0xc],r12
80002606:	99 2c       	st.w	r12[0x8],r12
80002608:	58 08       	cp.w	r8,0
8000260a:	c0 55       	brlt	80002614 <_malloc_r+0x128>
8000260c:	ec 09 00 09 	add	r9,r6,r9
80002610:	0a 9c       	mov	r12,r5
80002612:	ce 3b       	rjmp	800025d8 <_malloc_r+0xec>
80002614:	e0 49 01 ff 	cp.w	r9,511
80002618:	e0 8b 00 13 	brhi	8000263e <_malloc_r+0x152>
8000261c:	a3 99       	lsr	r9,0x3
8000261e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80002622:	70 2b       	ld.w	r11,r8[0x8]
80002624:	8d 38       	st.w	r6[0xc],r8
80002626:	8d 2b       	st.w	r6[0x8],r11
80002628:	97 36       	st.w	r11[0xc],r6
8000262a:	91 26       	st.w	r8[0x8],r6
8000262c:	a3 49       	asr	r9,0x2
8000262e:	74 18       	ld.w	r8,r10[0x4]
80002630:	30 1b       	mov	r11,1
80002632:	f6 09 09 49 	lsl	r9,r11,r9
80002636:	f1 e9 10 09 	or	r9,r8,r9
8000263a:	95 19       	st.w	r10[0x4],r9
8000263c:	c4 58       	rjmp	800026c6 <_malloc_r+0x1da>
8000263e:	f2 0a 16 09 	lsr	r10,r9,0x9
80002642:	58 4a       	cp.w	r10,4
80002644:	e0 8b 00 06 	brhi	80002650 <_malloc_r+0x164>
80002648:	f2 0a 16 06 	lsr	r10,r9,0x6
8000264c:	2c 8a       	sub	r10,-56
8000264e:	c1 f8       	rjmp	8000268c <_malloc_r+0x1a0>
80002650:	59 4a       	cp.w	r10,20
80002652:	e0 8b 00 04 	brhi	8000265a <_malloc_r+0x16e>
80002656:	2a 5a       	sub	r10,-91
80002658:	c1 a8       	rjmp	8000268c <_malloc_r+0x1a0>
8000265a:	e0 4a 00 54 	cp.w	r10,84
8000265e:	e0 8b 00 06 	brhi	8000266a <_malloc_r+0x17e>
80002662:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002666:	29 2a       	sub	r10,-110
80002668:	c1 28       	rjmp	8000268c <_malloc_r+0x1a0>
8000266a:	e0 4a 01 54 	cp.w	r10,340
8000266e:	e0 8b 00 06 	brhi	8000267a <_malloc_r+0x18e>
80002672:	f2 0a 16 0f 	lsr	r10,r9,0xf
80002676:	28 9a       	sub	r10,-119
80002678:	c0 a8       	rjmp	8000268c <_malloc_r+0x1a0>
8000267a:	e0 4a 05 54 	cp.w	r10,1364
8000267e:	e0 88 00 04 	brls	80002686 <_malloc_r+0x19a>
80002682:	37 ea       	mov	r10,126
80002684:	c0 48       	rjmp	8000268c <_malloc_r+0x1a0>
80002686:	f2 0a 16 12 	lsr	r10,r9,0x12
8000268a:	28 4a       	sub	r10,-124
8000268c:	30 8b       	mov	r11,8
8000268e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80002692:	68 28       	ld.w	r8,r4[0x8]
80002694:	08 38       	cp.w	r8,r4
80002696:	c0 e1       	brne	800026b2 <_malloc_r+0x1c6>
80002698:	76 19       	ld.w	r9,r11[0x4]
8000269a:	a3 4a       	asr	r10,0x2
8000269c:	30 1e       	mov	lr,1
8000269e:	fc 0a 09 4a 	lsl	r10,lr,r10
800026a2:	f3 ea 10 0a 	or	r10,r9,r10
800026a6:	10 99       	mov	r9,r8
800026a8:	97 1a       	st.w	r11[0x4],r10
800026aa:	c0 a8       	rjmp	800026be <_malloc_r+0x1d2>
800026ac:	70 28       	ld.w	r8,r8[0x8]
800026ae:	08 38       	cp.w	r8,r4
800026b0:	c0 60       	breq	800026bc <_malloc_r+0x1d0>
800026b2:	70 1a       	ld.w	r10,r8[0x4]
800026b4:	e0 1a ff fc 	andl	r10,0xfffc
800026b8:	14 39       	cp.w	r9,r10
800026ba:	cf 93       	brcs	800026ac <_malloc_r+0x1c0>
800026bc:	70 39       	ld.w	r9,r8[0xc]
800026be:	8d 39       	st.w	r6[0xc],r9
800026c0:	8d 28       	st.w	r6[0x8],r8
800026c2:	91 36       	st.w	r8[0xc],r6
800026c4:	93 26       	st.w	r9[0x8],r6
800026c6:	e6 08 14 02 	asr	r8,r3,0x2
800026ca:	30 1b       	mov	r11,1
800026cc:	30 84       	mov	r4,8
800026ce:	f6 08 09 4b 	lsl	r11,r11,r8
800026d2:	68 18       	ld.w	r8,r4[0x4]
800026d4:	10 3b       	cp.w	r11,r8
800026d6:	e0 8b 00 69 	brhi	800027a8 <_malloc_r+0x2bc>
800026da:	f7 e8 00 09 	and	r9,r11,r8
800026de:	c0 b1       	brne	800026f4 <_malloc_r+0x208>
800026e0:	e0 13 ff fc 	andl	r3,0xfffc
800026e4:	a1 7b       	lsl	r11,0x1
800026e6:	2f c3       	sub	r3,-4
800026e8:	c0 38       	rjmp	800026ee <_malloc_r+0x202>
800026ea:	2f c3       	sub	r3,-4
800026ec:	a1 7b       	lsl	r11,0x1
800026ee:	f7 e8 00 09 	and	r9,r11,r8
800026f2:	cf c0       	breq	800026ea <_malloc_r+0x1fe>
800026f4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800026f8:	06 92       	mov	r2,r3
800026fa:	1c 91       	mov	r1,lr
800026fc:	62 36       	ld.w	r6,r1[0xc]
800026fe:	c2 d8       	rjmp	80002758 <_malloc_r+0x26c>
80002700:	6c 1a       	ld.w	r10,r6[0x4]
80002702:	e0 1a ff fc 	andl	r10,0xfffc
80002706:	f4 07 01 08 	sub	r8,r10,r7
8000270a:	58 f8       	cp.w	r8,15
8000270c:	e0 8a 00 15 	brle	80002736 <_malloc_r+0x24a>
80002710:	6c 3a       	ld.w	r10,r6[0xc]
80002712:	6c 29       	ld.w	r9,r6[0x8]
80002714:	95 29       	st.w	r10[0x8],r9
80002716:	93 3a       	st.w	r9[0xc],r10
80002718:	0e 99       	mov	r9,r7
8000271a:	ec 07 00 07 	add	r7,r6,r7
8000271e:	a1 a9       	sbr	r9,0x0
80002720:	99 37       	st.w	r12[0xc],r7
80002722:	99 27       	st.w	r12[0x8],r7
80002724:	8d 19       	st.w	r6[0x4],r9
80002726:	ee 08 09 08 	st.w	r7[r8],r8
8000272a:	8f 2c       	st.w	r7[0x8],r12
8000272c:	8f 3c       	st.w	r7[0xc],r12
8000272e:	a1 a8       	sbr	r8,0x0
80002730:	0a 9c       	mov	r12,r5
80002732:	8f 18       	st.w	r7[0x4],r8
80002734:	c0 d8       	rjmp	8000274e <_malloc_r+0x262>
80002736:	6c 39       	ld.w	r9,r6[0xc]
80002738:	58 08       	cp.w	r8,0
8000273a:	c0 e5       	brlt	80002756 <_malloc_r+0x26a>
8000273c:	ec 0a 00 0a 	add	r10,r6,r10
80002740:	74 18       	ld.w	r8,r10[0x4]
80002742:	a1 a8       	sbr	r8,0x0
80002744:	0a 9c       	mov	r12,r5
80002746:	95 18       	st.w	r10[0x4],r8
80002748:	6c 28       	ld.w	r8,r6[0x8]
8000274a:	93 28       	st.w	r9[0x8],r8
8000274c:	91 39       	st.w	r8[0xc],r9
8000274e:	ce 5c       	rcall	80002918 <__malloc_unlock>
80002750:	ec cc ff f8 	sub	r12,r6,-8
80002754:	d8 32       	popm	r0-r7,pc
80002756:	12 96       	mov	r6,r9
80002758:	02 36       	cp.w	r6,r1
8000275a:	cd 31       	brne	80002700 <_malloc_r+0x214>
8000275c:	2f f2       	sub	r2,-1
8000275e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80002762:	c0 30       	breq	80002768 <_malloc_r+0x27c>
80002764:	2f 81       	sub	r1,-8
80002766:	cc bb       	rjmp	800026fc <_malloc_r+0x210>
80002768:	1c 98       	mov	r8,lr
8000276a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000276e:	c0 81       	brne	8000277e <_malloc_r+0x292>
80002770:	68 19       	ld.w	r9,r4[0x4]
80002772:	f6 08 11 ff 	rsub	r8,r11,-1
80002776:	f3 e8 00 08 	and	r8,r9,r8
8000277a:	89 18       	st.w	r4[0x4],r8
8000277c:	c0 78       	rjmp	8000278a <_malloc_r+0x29e>
8000277e:	f0 c9 00 08 	sub	r9,r8,8
80002782:	20 13       	sub	r3,1
80002784:	70 08       	ld.w	r8,r8[0x0]
80002786:	12 38       	cp.w	r8,r9
80002788:	cf 10       	breq	8000276a <_malloc_r+0x27e>
8000278a:	a1 7b       	lsl	r11,0x1
8000278c:	68 18       	ld.w	r8,r4[0x4]
8000278e:	10 3b       	cp.w	r11,r8
80002790:	e0 8b 00 0c 	brhi	800027a8 <_malloc_r+0x2bc>
80002794:	58 0b       	cp.w	r11,0
80002796:	c0 90       	breq	800027a8 <_malloc_r+0x2bc>
80002798:	04 93       	mov	r3,r2
8000279a:	c0 38       	rjmp	800027a0 <_malloc_r+0x2b4>
8000279c:	2f c3       	sub	r3,-4
8000279e:	a1 7b       	lsl	r11,0x1
800027a0:	f7 e8 00 09 	and	r9,r11,r8
800027a4:	ca 81       	brne	800026f4 <_malloc_r+0x208>
800027a6:	cf bb       	rjmp	8000279c <_malloc_r+0x2b0>
800027a8:	68 23       	ld.w	r3,r4[0x8]
800027aa:	66 12       	ld.w	r2,r3[0x4]
800027ac:	e0 12 ff fc 	andl	r2,0xfffc
800027b0:	0e 32       	cp.w	r2,r7
800027b2:	5f 39       	srlo	r9
800027b4:	e4 07 01 08 	sub	r8,r2,r7
800027b8:	58 f8       	cp.w	r8,15
800027ba:	5f aa       	srle	r10
800027bc:	f5 e9 10 09 	or	r9,r10,r9
800027c0:	e0 80 00 96 	breq	800028ec <_malloc_r+0x400>
800027c4:	e0 68 06 08 	mov	r8,1544
800027c8:	70 01       	ld.w	r1,r8[0x0]
800027ca:	e0 68 04 14 	mov	r8,1044
800027ce:	2f 01       	sub	r1,-16
800027d0:	70 08       	ld.w	r8,r8[0x0]
800027d2:	0e 01       	add	r1,r7
800027d4:	5b f8       	cp.w	r8,-1
800027d6:	c0 40       	breq	800027de <_malloc_r+0x2f2>
800027d8:	28 11       	sub	r1,-127
800027da:	e0 11 ff 80 	andl	r1,0xff80
800027de:	02 9b       	mov	r11,r1
800027e0:	0a 9c       	mov	r12,r5
800027e2:	c9 dc       	rcall	8000291c <_sbrk_r>
800027e4:	18 96       	mov	r6,r12
800027e6:	5b fc       	cp.w	r12,-1
800027e8:	c7 30       	breq	800028ce <_malloc_r+0x3e2>
800027ea:	e6 02 00 08 	add	r8,r3,r2
800027ee:	10 3c       	cp.w	r12,r8
800027f0:	c0 32       	brcc	800027f6 <_malloc_r+0x30a>
800027f2:	08 33       	cp.w	r3,r4
800027f4:	c6 d1       	brne	800028ce <_malloc_r+0x3e2>
800027f6:	e0 6a 06 0c 	mov	r10,1548
800027fa:	74 09       	ld.w	r9,r10[0x0]
800027fc:	e2 09 00 09 	add	r9,r1,r9
80002800:	95 09       	st.w	r10[0x0],r9
80002802:	10 36       	cp.w	r6,r8
80002804:	c0 a1       	brne	80002818 <_malloc_r+0x32c>
80002806:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000280a:	c0 71       	brne	80002818 <_malloc_r+0x32c>
8000280c:	e2 02 00 02 	add	r2,r1,r2
80002810:	68 28       	ld.w	r8,r4[0x8]
80002812:	a1 a2       	sbr	r2,0x0
80002814:	91 12       	st.w	r8[0x4],r2
80002816:	c4 d8       	rjmp	800028b0 <_malloc_r+0x3c4>
80002818:	e0 6a 04 14 	mov	r10,1044
8000281c:	74 0b       	ld.w	r11,r10[0x0]
8000281e:	5b fb       	cp.w	r11,-1
80002820:	c0 31       	brne	80002826 <_malloc_r+0x33a>
80002822:	95 06       	st.w	r10[0x0],r6
80002824:	c0 78       	rjmp	80002832 <_malloc_r+0x346>
80002826:	ec 09 00 09 	add	r9,r6,r9
8000282a:	e0 6a 06 0c 	mov	r10,1548
8000282e:	10 19       	sub	r9,r8
80002830:	95 09       	st.w	r10[0x0],r9
80002832:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80002836:	f0 09 11 08 	rsub	r9,r8,8
8000283a:	58 08       	cp.w	r8,0
8000283c:	f2 08 17 10 	movne	r8,r9
80002840:	ed d8 e1 06 	addne	r6,r6,r8
80002844:	28 08       	sub	r8,-128
80002846:	ec 01 00 01 	add	r1,r6,r1
8000284a:	0a 9c       	mov	r12,r5
8000284c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80002850:	f0 01 01 01 	sub	r1,r8,r1
80002854:	02 9b       	mov	r11,r1
80002856:	c6 3c       	rcall	8000291c <_sbrk_r>
80002858:	e0 68 06 0c 	mov	r8,1548
8000285c:	5b fc       	cp.w	r12,-1
8000285e:	ec 0c 17 00 	moveq	r12,r6
80002862:	f9 b1 00 00 	moveq	r1,0
80002866:	70 09       	ld.w	r9,r8[0x0]
80002868:	0c 1c       	sub	r12,r6
8000286a:	89 26       	st.w	r4[0x8],r6
8000286c:	02 0c       	add	r12,r1
8000286e:	12 01       	add	r1,r9
80002870:	a1 ac       	sbr	r12,0x0
80002872:	91 01       	st.w	r8[0x0],r1
80002874:	8d 1c       	st.w	r6[0x4],r12
80002876:	08 33       	cp.w	r3,r4
80002878:	c1 c0       	breq	800028b0 <_malloc_r+0x3c4>
8000287a:	58 f2       	cp.w	r2,15
8000287c:	e0 8b 00 05 	brhi	80002886 <_malloc_r+0x39a>
80002880:	30 18       	mov	r8,1
80002882:	8d 18       	st.w	r6[0x4],r8
80002884:	c2 58       	rjmp	800028ce <_malloc_r+0x3e2>
80002886:	30 59       	mov	r9,5
80002888:	20 c2       	sub	r2,12
8000288a:	e0 12 ff f8 	andl	r2,0xfff8
8000288e:	e6 02 00 08 	add	r8,r3,r2
80002892:	91 29       	st.w	r8[0x8],r9
80002894:	91 19       	st.w	r8[0x4],r9
80002896:	66 18       	ld.w	r8,r3[0x4]
80002898:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000289c:	e5 e8 10 08 	or	r8,r2,r8
800028a0:	87 18       	st.w	r3[0x4],r8
800028a2:	58 f2       	cp.w	r2,15
800028a4:	e0 88 00 06 	brls	800028b0 <_malloc_r+0x3c4>
800028a8:	e6 cb ff f8 	sub	r11,r3,-8
800028ac:	0a 9c       	mov	r12,r5
800028ae:	ca dc       	rcall	80002a08 <_free_r>
800028b0:	e0 69 06 04 	mov	r9,1540
800028b4:	72 0a       	ld.w	r10,r9[0x0]
800028b6:	e0 68 06 0c 	mov	r8,1548
800028ba:	70 08       	ld.w	r8,r8[0x0]
800028bc:	14 38       	cp.w	r8,r10
800028be:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800028c2:	e0 69 06 00 	mov	r9,1536
800028c6:	72 0a       	ld.w	r10,r9[0x0]
800028c8:	14 38       	cp.w	r8,r10
800028ca:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800028ce:	68 28       	ld.w	r8,r4[0x8]
800028d0:	70 18       	ld.w	r8,r8[0x4]
800028d2:	e0 18 ff fc 	andl	r8,0xfffc
800028d6:	0e 38       	cp.w	r8,r7
800028d8:	5f 39       	srlo	r9
800028da:	0e 18       	sub	r8,r7
800028dc:	58 f8       	cp.w	r8,15
800028de:	5f aa       	srle	r10
800028e0:	f5 e9 10 09 	or	r9,r10,r9
800028e4:	c0 40       	breq	800028ec <_malloc_r+0x400>
800028e6:	0a 9c       	mov	r12,r5
800028e8:	c1 8c       	rcall	80002918 <__malloc_unlock>
800028ea:	d8 3a       	popm	r0-r7,pc,r12=0
800028ec:	68 26       	ld.w	r6,r4[0x8]
800028ee:	a1 a8       	sbr	r8,0x0
800028f0:	0e 99       	mov	r9,r7
800028f2:	a1 a9       	sbr	r9,0x0
800028f4:	8d 19       	st.w	r6[0x4],r9
800028f6:	ec 07 00 07 	add	r7,r6,r7
800028fa:	0a 9c       	mov	r12,r5
800028fc:	89 27       	st.w	r4[0x8],r7
800028fe:	8f 18       	st.w	r7[0x4],r8
80002900:	c0 cc       	rcall	80002918 <__malloc_unlock>
80002902:	ec cc ff f8 	sub	r12,r6,-8
80002906:	d8 32       	popm	r0-r7,pc

80002908 <memset>:
80002908:	18 98       	mov	r8,r12
8000290a:	c0 38       	rjmp	80002910 <memset+0x8>
8000290c:	10 cb       	st.b	r8++,r11
8000290e:	20 1a       	sub	r10,1
80002910:	58 0a       	cp.w	r10,0
80002912:	cf d1       	brne	8000290c <memset+0x4>
80002914:	5e fc       	retal	r12

80002916 <__malloc_lock>:
80002916:	5e fc       	retal	r12

80002918 <__malloc_unlock>:
80002918:	5e fc       	retal	r12
8000291a:	d7 03       	nop

8000291c <_sbrk_r>:
8000291c:	d4 21       	pushm	r4-r7,lr
8000291e:	30 08       	mov	r8,0
80002920:	18 97       	mov	r7,r12
80002922:	e0 66 06 38 	mov	r6,1592
80002926:	16 9c       	mov	r12,r11
80002928:	8d 08       	st.w	r6[0x0],r8
8000292a:	c0 9c       	rcall	8000293c <_sbrk>
8000292c:	5b fc       	cp.w	r12,-1
8000292e:	c0 51       	brne	80002938 <_sbrk_r+0x1c>
80002930:	6c 08       	ld.w	r8,r6[0x0]
80002932:	58 08       	cp.w	r8,0
80002934:	ef f8 1a 03 	st.wne	r7[0xc],r8
80002938:	d8 22       	popm	r4-r7,pc
8000293a:	d7 03       	nop

8000293c <_sbrk>:
8000293c:	d4 01       	pushm	lr
8000293e:	e0 68 06 34 	mov	r8,1588
80002942:	70 09       	ld.w	r9,r8[0x0]
80002944:	58 09       	cp.w	r9,0
80002946:	c0 41       	brne	8000294e <_sbrk+0x12>
80002948:	e0 69 06 40 	mov	r9,1600
8000294c:	91 09       	st.w	r8[0x0],r9
8000294e:	e0 69 06 34 	mov	r9,1588
80002952:	e0 6a f0 00 	mov	r10,61440
80002956:	72 08       	ld.w	r8,r9[0x0]
80002958:	f0 0c 00 0c 	add	r12,r8,r12
8000295c:	14 3c       	cp.w	r12,r10
8000295e:	e0 8b 00 04 	brhi	80002966 <_sbrk+0x2a>
80002962:	93 0c       	st.w	r9[0x0],r12
80002964:	c0 58       	rjmp	8000296e <_sbrk+0x32>
80002966:	c0 7c       	rcall	80002974 <__errno>
80002968:	30 c8       	mov	r8,12
8000296a:	99 08       	st.w	r12[0x0],r8
8000296c:	3f f8       	mov	r8,-1
8000296e:	10 9c       	mov	r12,r8
80002970:	d8 02       	popm	pc
80002972:	d7 03       	nop

80002974 <__errno>:
80002974:	e0 68 05 08 	mov	r8,1288
80002978:	70 0c       	ld.w	r12,r8[0x0]
8000297a:	2f 4c       	sub	r12,-12
8000297c:	5e fc       	retal	r12
8000297e:	d7 03       	nop

80002980 <_malloc_trim_r>:
80002980:	d4 21       	pushm	r4-r7,lr
80002982:	16 95       	mov	r5,r11
80002984:	18 97       	mov	r7,r12
80002986:	cc 8f       	rcall	80002916 <__malloc_lock>
80002988:	30 84       	mov	r4,8
8000298a:	68 28       	ld.w	r8,r4[0x8]
8000298c:	70 16       	ld.w	r6,r8[0x4]
8000298e:	e0 16 ff fc 	andl	r6,0xfffc
80002992:	ec c8 ff 91 	sub	r8,r6,-111
80002996:	f0 05 01 05 	sub	r5,r8,r5
8000299a:	e0 15 ff 80 	andl	r5,0xff80
8000299e:	ea c5 00 80 	sub	r5,r5,128
800029a2:	e0 45 00 7f 	cp.w	r5,127
800029a6:	e0 8a 00 22 	brle	800029ea <_malloc_trim_r+0x6a>
800029aa:	30 0b       	mov	r11,0
800029ac:	0e 9c       	mov	r12,r7
800029ae:	cb 7f       	rcall	8000291c <_sbrk_r>
800029b0:	68 28       	ld.w	r8,r4[0x8]
800029b2:	0c 08       	add	r8,r6
800029b4:	10 3c       	cp.w	r12,r8
800029b6:	c1 a1       	brne	800029ea <_malloc_trim_r+0x6a>
800029b8:	ea 0b 11 00 	rsub	r11,r5,0
800029bc:	0e 9c       	mov	r12,r7
800029be:	ca ff       	rcall	8000291c <_sbrk_r>
800029c0:	5b fc       	cp.w	r12,-1
800029c2:	c1 71       	brne	800029f0 <_malloc_trim_r+0x70>
800029c4:	30 0b       	mov	r11,0
800029c6:	0e 9c       	mov	r12,r7
800029c8:	ca af       	rcall	8000291c <_sbrk_r>
800029ca:	68 28       	ld.w	r8,r4[0x8]
800029cc:	f8 08 01 09 	sub	r9,r12,r8
800029d0:	58 f9       	cp.w	r9,15
800029d2:	e0 8a 00 0c 	brle	800029ea <_malloc_trim_r+0x6a>
800029d6:	a1 a9       	sbr	r9,0x0
800029d8:	91 19       	st.w	r8[0x4],r9
800029da:	e0 68 04 14 	mov	r8,1044
800029de:	70 09       	ld.w	r9,r8[0x0]
800029e0:	e0 68 06 0c 	mov	r8,1548
800029e4:	f8 09 01 09 	sub	r9,r12,r9
800029e8:	91 09       	st.w	r8[0x0],r9
800029ea:	0e 9c       	mov	r12,r7
800029ec:	c9 6f       	rcall	80002918 <__malloc_unlock>
800029ee:	d8 2a       	popm	r4-r7,pc,r12=0
800029f0:	68 28       	ld.w	r8,r4[0x8]
800029f2:	0a 16       	sub	r6,r5
800029f4:	a1 a6       	sbr	r6,0x0
800029f6:	91 16       	st.w	r8[0x4],r6
800029f8:	e0 68 06 0c 	mov	r8,1548
800029fc:	70 09       	ld.w	r9,r8[0x0]
800029fe:	0a 19       	sub	r9,r5
80002a00:	0e 9c       	mov	r12,r7
80002a02:	91 09       	st.w	r8[0x0],r9
80002a04:	c8 af       	rcall	80002918 <__malloc_unlock>
80002a06:	da 2a       	popm	r4-r7,pc,r12=1

80002a08 <_free_r>:
80002a08:	d4 21       	pushm	r4-r7,lr
80002a0a:	16 96       	mov	r6,r11
80002a0c:	18 97       	mov	r7,r12
80002a0e:	58 0b       	cp.w	r11,0
80002a10:	e0 80 00 bb 	breq	80002b86 <_free_r+0x17e>
80002a14:	c8 1f       	rcall	80002916 <__malloc_lock>
80002a16:	20 86       	sub	r6,8
80002a18:	30 8a       	mov	r10,8
80002a1a:	6c 18       	ld.w	r8,r6[0x4]
80002a1c:	74 2e       	ld.w	lr,r10[0x8]
80002a1e:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002a22:	a1 c8       	cbr	r8,0x0
80002a24:	ec 08 00 09 	add	r9,r6,r8
80002a28:	72 1b       	ld.w	r11,r9[0x4]
80002a2a:	e0 1b ff fc 	andl	r11,0xfffc
80002a2e:	1c 39       	cp.w	r9,lr
80002a30:	c1 d1       	brne	80002a6a <_free_r+0x62>
80002a32:	f6 08 00 08 	add	r8,r11,r8
80002a36:	58 0c       	cp.w	r12,0
80002a38:	c0 81       	brne	80002a48 <_free_r+0x40>
80002a3a:	6c 09       	ld.w	r9,r6[0x0]
80002a3c:	12 16       	sub	r6,r9
80002a3e:	12 08       	add	r8,r9
80002a40:	6c 3b       	ld.w	r11,r6[0xc]
80002a42:	6c 29       	ld.w	r9,r6[0x8]
80002a44:	97 29       	st.w	r11[0x8],r9
80002a46:	93 3b       	st.w	r9[0xc],r11
80002a48:	10 99       	mov	r9,r8
80002a4a:	95 26       	st.w	r10[0x8],r6
80002a4c:	a1 a9       	sbr	r9,0x0
80002a4e:	8d 19       	st.w	r6[0x4],r9
80002a50:	e0 69 04 10 	mov	r9,1040
80002a54:	72 09       	ld.w	r9,r9[0x0]
80002a56:	12 38       	cp.w	r8,r9
80002a58:	c0 63       	brcs	80002a64 <_free_r+0x5c>
80002a5a:	e0 68 06 08 	mov	r8,1544
80002a5e:	0e 9c       	mov	r12,r7
80002a60:	70 0b       	ld.w	r11,r8[0x0]
80002a62:	c8 ff       	rcall	80002980 <_malloc_trim_r>
80002a64:	0e 9c       	mov	r12,r7
80002a66:	c5 9f       	rcall	80002918 <__malloc_unlock>
80002a68:	d8 22       	popm	r4-r7,pc
80002a6a:	93 1b       	st.w	r9[0x4],r11
80002a6c:	58 0c       	cp.w	r12,0
80002a6e:	c0 30       	breq	80002a74 <_free_r+0x6c>
80002a70:	30 0c       	mov	r12,0
80002a72:	c1 08       	rjmp	80002a92 <_free_r+0x8a>
80002a74:	6c 0e       	ld.w	lr,r6[0x0]
80002a76:	f4 c5 ff f8 	sub	r5,r10,-8
80002a7a:	1c 16       	sub	r6,lr
80002a7c:	1c 08       	add	r8,lr
80002a7e:	6c 2e       	ld.w	lr,r6[0x8]
80002a80:	0a 3e       	cp.w	lr,r5
80002a82:	f9 bc 00 01 	moveq	r12,1
80002a86:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80002a8a:	eb fe 1a 02 	st.wne	r5[0x8],lr
80002a8e:	fd f5 1a 03 	st.wne	lr[0xc],r5
80002a92:	f2 0b 00 0e 	add	lr,r9,r11
80002a96:	7c 1e       	ld.w	lr,lr[0x4]
80002a98:	ed be 00 00 	bld	lr,0x0
80002a9c:	c1 30       	breq	80002ac2 <_free_r+0xba>
80002a9e:	16 08       	add	r8,r11
80002aa0:	58 0c       	cp.w	r12,0
80002aa2:	c0 c1       	brne	80002aba <_free_r+0xb2>
80002aa4:	30 8e       	mov	lr,8
80002aa6:	72 2b       	ld.w	r11,r9[0x8]
80002aa8:	2f 8e       	sub	lr,-8
80002aaa:	1c 3b       	cp.w	r11,lr
80002aac:	c0 71       	brne	80002aba <_free_r+0xb2>
80002aae:	97 36       	st.w	r11[0xc],r6
80002ab0:	97 26       	st.w	r11[0x8],r6
80002ab2:	8d 2b       	st.w	r6[0x8],r11
80002ab4:	8d 3b       	st.w	r6[0xc],r11
80002ab6:	30 1c       	mov	r12,1
80002ab8:	c0 58       	rjmp	80002ac2 <_free_r+0xba>
80002aba:	72 2b       	ld.w	r11,r9[0x8]
80002abc:	72 39       	ld.w	r9,r9[0xc]
80002abe:	93 2b       	st.w	r9[0x8],r11
80002ac0:	97 39       	st.w	r11[0xc],r9
80002ac2:	10 99       	mov	r9,r8
80002ac4:	ec 08 09 08 	st.w	r6[r8],r8
80002ac8:	a1 a9       	sbr	r9,0x0
80002aca:	8d 19       	st.w	r6[0x4],r9
80002acc:	58 0c       	cp.w	r12,0
80002ace:	c5 a1       	brne	80002b82 <_free_r+0x17a>
80002ad0:	e0 48 01 ff 	cp.w	r8,511
80002ad4:	e0 8b 00 13 	brhi	80002afa <_free_r+0xf2>
80002ad8:	a3 98       	lsr	r8,0x3
80002ada:	f4 08 00 39 	add	r9,r10,r8<<0x3
80002ade:	72 2b       	ld.w	r11,r9[0x8]
80002ae0:	8d 39       	st.w	r6[0xc],r9
80002ae2:	8d 2b       	st.w	r6[0x8],r11
80002ae4:	97 36       	st.w	r11[0xc],r6
80002ae6:	93 26       	st.w	r9[0x8],r6
80002ae8:	a3 48       	asr	r8,0x2
80002aea:	74 19       	ld.w	r9,r10[0x4]
80002aec:	30 1b       	mov	r11,1
80002aee:	f6 08 09 48 	lsl	r8,r11,r8
80002af2:	f3 e8 10 08 	or	r8,r9,r8
80002af6:	95 18       	st.w	r10[0x4],r8
80002af8:	c4 58       	rjmp	80002b82 <_free_r+0x17a>
80002afa:	f0 0b 16 09 	lsr	r11,r8,0x9
80002afe:	58 4b       	cp.w	r11,4
80002b00:	e0 8b 00 06 	brhi	80002b0c <_free_r+0x104>
80002b04:	f0 0b 16 06 	lsr	r11,r8,0x6
80002b08:	2c 8b       	sub	r11,-56
80002b0a:	c2 08       	rjmp	80002b4a <_free_r+0x142>
80002b0c:	59 4b       	cp.w	r11,20
80002b0e:	e0 8b 00 04 	brhi	80002b16 <_free_r+0x10e>
80002b12:	2a 5b       	sub	r11,-91
80002b14:	c1 b8       	rjmp	80002b4a <_free_r+0x142>
80002b16:	e0 4b 00 54 	cp.w	r11,84
80002b1a:	e0 8b 00 06 	brhi	80002b26 <_free_r+0x11e>
80002b1e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80002b22:	29 2b       	sub	r11,-110
80002b24:	c1 38       	rjmp	80002b4a <_free_r+0x142>
80002b26:	e0 4b 01 54 	cp.w	r11,340
80002b2a:	e0 8b 00 06 	brhi	80002b36 <_free_r+0x12e>
80002b2e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80002b32:	28 9b       	sub	r11,-119
80002b34:	c0 b8       	rjmp	80002b4a <_free_r+0x142>
80002b36:	e0 4b 05 54 	cp.w	r11,1364
80002b3a:	e0 88 00 05 	brls	80002b44 <_free_r+0x13c>
80002b3e:	37 eb       	mov	r11,126
80002b40:	c0 58       	rjmp	80002b4a <_free_r+0x142>
80002b42:	d7 03       	nop
80002b44:	f0 0b 16 12 	lsr	r11,r8,0x12
80002b48:	28 4b       	sub	r11,-124
80002b4a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80002b4e:	78 29       	ld.w	r9,r12[0x8]
80002b50:	18 39       	cp.w	r9,r12
80002b52:	c0 e1       	brne	80002b6e <_free_r+0x166>
80002b54:	74 18       	ld.w	r8,r10[0x4]
80002b56:	a3 4b       	asr	r11,0x2
80002b58:	30 1c       	mov	r12,1
80002b5a:	f8 0b 09 4b 	lsl	r11,r12,r11
80002b5e:	f1 eb 10 0b 	or	r11,r8,r11
80002b62:	12 98       	mov	r8,r9
80002b64:	95 1b       	st.w	r10[0x4],r11
80002b66:	c0 a8       	rjmp	80002b7a <_free_r+0x172>
80002b68:	72 29       	ld.w	r9,r9[0x8]
80002b6a:	18 39       	cp.w	r9,r12
80002b6c:	c0 60       	breq	80002b78 <_free_r+0x170>
80002b6e:	72 1a       	ld.w	r10,r9[0x4]
80002b70:	e0 1a ff fc 	andl	r10,0xfffc
80002b74:	14 38       	cp.w	r8,r10
80002b76:	cf 93       	brcs	80002b68 <_free_r+0x160>
80002b78:	72 38       	ld.w	r8,r9[0xc]
80002b7a:	8d 38       	st.w	r6[0xc],r8
80002b7c:	8d 29       	st.w	r6[0x8],r9
80002b7e:	93 36       	st.w	r9[0xc],r6
80002b80:	91 26       	st.w	r8[0x8],r6
80002b82:	0e 9c       	mov	r12,r7
80002b84:	cc ae       	rcall	80002918 <__malloc_unlock>
80002b86:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80002c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002c00:	c0 08       	rjmp	80002c00 <_evba>
	...

80002c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002c04:	c0 08       	rjmp	80002c04 <_handle_TLB_Multiple_Hit>
	...

80002c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002c08:	c0 08       	rjmp	80002c08 <_handle_Bus_Error_Data_Fetch>
	...

80002c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80002c0c:	c0 08       	rjmp	80002c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002c10:	c0 08       	rjmp	80002c10 <_handle_NMI>
	...

80002c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002c14:	c0 08       	rjmp	80002c14 <_handle_Instruction_Address>
	...

80002c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002c18:	c0 08       	rjmp	80002c18 <_handle_ITLB_Protection>
	...

80002c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80002c1c:	c0 08       	rjmp	80002c1c <_handle_Breakpoint>
	...

80002c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002c20:	c0 08       	rjmp	80002c20 <_handle_Illegal_Opcode>
	...

80002c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002c24:	c0 08       	rjmp	80002c24 <_handle_Unimplemented_Instruction>
	...

80002c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002c28:	c0 08       	rjmp	80002c28 <_handle_Privilege_Violation>
	...

80002c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80002c2c:	c0 08       	rjmp	80002c2c <_handle_Floating_Point>
	...

80002c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002c30:	c0 08       	rjmp	80002c30 <_handle_Coprocessor_Absent>
	...

80002c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002c34:	c0 08       	rjmp	80002c34 <_handle_Data_Address_Read>
	...

80002c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002c38:	c0 08       	rjmp	80002c38 <_handle_Data_Address_Write>
	...

80002c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80002c3c:	c0 08       	rjmp	80002c3c <_handle_DTLB_Protection_Read>
	...

80002c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002c40:	c0 08       	rjmp	80002c40 <_handle_DTLB_Protection_Write>
	...

80002c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002c44:	c0 08       	rjmp	80002c44 <_handle_DTLB_Modified>
	...

80002c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002c50:	c0 08       	rjmp	80002c50 <_handle_ITLB_Miss>
	...

80002c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002c60:	c0 08       	rjmp	80002c60 <_handle_DTLB_Miss_Read>
	...

80002c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002c70:	c0 08       	rjmp	80002c70 <_handle_DTLB_Miss_Write>
	...

80002d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002d00:	c0 08       	rjmp	80002d00 <_handle_Supervisor_Call>
80002d02:	d7 03       	nop

80002d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d04:	30 0c       	mov	r12,0
80002d06:	fe b0 fa 5f 	rcall	800021c4 <_get_interrupt_handler>
80002d0a:	58 0c       	cp.w	r12,0
80002d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d10:	d6 03       	rete

80002d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d12:	30 1c       	mov	r12,1
80002d14:	fe b0 fa 58 	rcall	800021c4 <_get_interrupt_handler>
80002d18:	58 0c       	cp.w	r12,0
80002d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d1e:	d6 03       	rete

80002d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d20:	30 2c       	mov	r12,2
80002d22:	fe b0 fa 51 	rcall	800021c4 <_get_interrupt_handler>
80002d26:	58 0c       	cp.w	r12,0
80002d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d2c:	d6 03       	rete

80002d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d2e:	30 3c       	mov	r12,3
80002d30:	fe b0 fa 4a 	rcall	800021c4 <_get_interrupt_handler>
80002d34:	58 0c       	cp.w	r12,0
80002d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d3a:	d6 03       	rete
80002d3c:	d7 03       	nop
80002d3e:	d7 03       	nop
80002d40:	d7 03       	nop
80002d42:	d7 03       	nop
80002d44:	d7 03       	nop
80002d46:	d7 03       	nop
80002d48:	d7 03       	nop
80002d4a:	d7 03       	nop
80002d4c:	d7 03       	nop
80002d4e:	d7 03       	nop
80002d50:	d7 03       	nop
80002d52:	d7 03       	nop
80002d54:	d7 03       	nop
80002d56:	d7 03       	nop
80002d58:	d7 03       	nop
80002d5a:	d7 03       	nop
80002d5c:	d7 03       	nop
80002d5e:	d7 03       	nop
80002d60:	d7 03       	nop
80002d62:	d7 03       	nop
80002d64:	d7 03       	nop
80002d66:	d7 03       	nop
80002d68:	d7 03       	nop
80002d6a:	d7 03       	nop
80002d6c:	d7 03       	nop
80002d6e:	d7 03       	nop
80002d70:	d7 03       	nop
80002d72:	d7 03       	nop
80002d74:	d7 03       	nop
80002d76:	d7 03       	nop
80002d78:	d7 03       	nop
80002d7a:	d7 03       	nop
80002d7c:	d7 03       	nop
80002d7e:	d7 03       	nop
80002d80:	d7 03       	nop
80002d82:	d7 03       	nop
80002d84:	d7 03       	nop
80002d86:	d7 03       	nop
80002d88:	d7 03       	nop
80002d8a:	d7 03       	nop
80002d8c:	d7 03       	nop
80002d8e:	d7 03       	nop
80002d90:	d7 03       	nop
80002d92:	d7 03       	nop
80002d94:	d7 03       	nop
80002d96:	d7 03       	nop
80002d98:	d7 03       	nop
80002d9a:	d7 03       	nop
80002d9c:	d7 03       	nop
80002d9e:	d7 03       	nop
80002da0:	d7 03       	nop
80002da2:	d7 03       	nop
80002da4:	d7 03       	nop
80002da6:	d7 03       	nop
80002da8:	d7 03       	nop
80002daa:	d7 03       	nop
80002dac:	d7 03       	nop
80002dae:	d7 03       	nop
80002db0:	d7 03       	nop
80002db2:	d7 03       	nop
80002db4:	d7 03       	nop
80002db6:	d7 03       	nop
80002db8:	d7 03       	nop
80002dba:	d7 03       	nop
80002dbc:	d7 03       	nop
80002dbe:	d7 03       	nop
80002dc0:	d7 03       	nop
80002dc2:	d7 03       	nop
80002dc4:	d7 03       	nop
80002dc6:	d7 03       	nop
80002dc8:	d7 03       	nop
80002dca:	d7 03       	nop
80002dcc:	d7 03       	nop
80002dce:	d7 03       	nop
80002dd0:	d7 03       	nop
80002dd2:	d7 03       	nop
80002dd4:	d7 03       	nop
80002dd6:	d7 03       	nop
80002dd8:	d7 03       	nop
80002dda:	d7 03       	nop
80002ddc:	d7 03       	nop
80002dde:	d7 03       	nop
80002de0:	d7 03       	nop
80002de2:	d7 03       	nop
80002de4:	d7 03       	nop
80002de6:	d7 03       	nop
80002de8:	d7 03       	nop
80002dea:	d7 03       	nop
80002dec:	d7 03       	nop
80002dee:	d7 03       	nop
80002df0:	d7 03       	nop
80002df2:	d7 03       	nop
80002df4:	d7 03       	nop
80002df6:	d7 03       	nop
80002df8:	d7 03       	nop
80002dfa:	d7 03       	nop
80002dfc:	d7 03       	nop
80002dfe:	d7 03       	nop
